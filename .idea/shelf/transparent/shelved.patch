Index: src/main/java/com/mallowigi/idea/themes/lists/MTThemeResources.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*\n * The MIT License (MIT)\n *\n * Copyright (c) 2015-2021 Elior \"Mallowigi\" Boukhobza\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n *\n *\n */\n\npackage com.mallowigi.idea.themes.lists;\n\nimport com.google.common.collect.Sets;\nimport org.jetbrains.annotations.NonNls;\n\nimport java.util.Collections;\nimport java.util.Set;\n\n@SuppressWarnings({\"unused\",\n  \"StaticMethodOnlyUsedInOneClass\",\n  \"DuplicateStringLiteralInspection\",\n  \"HardCodedStringLiteral\"})\npublic enum MTThemeResources {\n  THEMEY;\n\n  @NonNls\n  public static final Set<String> SCROLLBAR_RESOURCES = Collections.unmodifiableSet(\n    Sets.newHashSet(\n      \"ScrollBar.Mac.hoverTrackColor\",\n      \"ScrollBar.Mac.trackColor\",\n      \"ScrollBar.Mac.Transparent.hoverTrackColor\",\n      \"ScrollBar.Mac.Transparent.trackColor\",\n      \"ScrollBar.hoverTrackColor\",\n      \"ScrollBar.trackColor\",\n      \"ScrollBar.Transparent.hoverTrackColor\",\n      \"ScrollBar.Transparent.trackColor\"\n    )\n  );\n\n  /**\n   * Get resources using the background color\n   */\n  @NonNls\n  public static Set<String> getBackgroundResources() {\n    return Collections.unmodifiableSet(\n      Sets.newHashSet(\n        \"activeCaption\", // deprecated\n        \"Borders.ContrastBorderColor\",\n        \"Button.darcula.disabledText.shadow\", // deprecated\n        \"Button.default.shadowColor\",\n        \"BigSpinner.background\",\n        \"CheckBox.background\",\n        \"Checkbox.Background.Default\",\n        \"Checkbox.Background.Default.Dark\",\n        \"CheckBox.borderColor\",\n        \"CheckBox.checkSignColor\",\n        \"CheckBox.checkSignColor.selected\",\n        \"CheckBox.checkSignColorDisabled\",\n        \"CheckBox.checkSignColorDisabled.selected\",\n        \"CheckBox.disabledBorderColor\",\n        \"CheckBox.focused.background\",\n        \"CheckBox.focusedArmed.background\",\n        \"Checkbox.Focus.Thin.Default\",\n        \"Checkbox.Focus.Thin.Default.Dark\",\n        \"Checkbox.Focus.Wide.Default\",\n        \"Checkbox.Focus.Wide.Default.Dark\",\n        \"CheckBox.inactiveFillColor\",\n        \"CheckBox.shadowColor\",\n        \"CheckBox.shadowColorDisabled\",\n        \"CheckBoxMenuItem.background\",\n        \"CheckBoxMenuItem.disabledBackground\",\n        \"ColorChooser.background\",\n        \"ComboBox.ArrowButton.nonEditableBackground\",\n        \"ComboBox.arrowFillColor\",\n        \"ComboBox.background\",\n        \"ComboBox.darcula.arrowButtonBackground\", // deprecated\n        \"ComboBox.darcula.disabledArrowButtonBackground\", // deprecated\n        \"ComboBox.darcula.editable.arrowButtonBackground\", // deprecated\n        \"ComboBox.darcula.nonEditableBackground\", // deprecated\n        \"ComboBox.disabledBackground\",\n        \"ComboBox.nonEditableBackground\",\n        \"control\",\n        \"darcula.background\",\n        \"DebuggerPopup.borderColor\",\n        \"DefaultTabs.background\",\n        \"DefaultTabs.borderColor\",\n        \"DefaultTabs.inactiveColoredTabBackground\",\n        \"Desktop.background\",\n        \"Dialog.titleColor\", // deprecated\n        \"DialogWrapper.southPanelBackground\",\n        \"DialogWrapper.southPanelDivider\",\n        \"DragAndDrop.areaBorderColor\",\n        \"DragAndDrop.backgroundBorderColor\", // deprecated\n        \"DragAndDrop.backgroundColor\", //deprecated\n        \"DragAndDrop.areaBackground\",\n        \"Editor.background\",\n        \"EditorGroupsTabs.background\",\n        \"EditorPane.inactiveBackground\",\n        \"EditorTabs.background\",\n        //            \"EditorTabs.inactiveColoredFileBackground\",\n        \"EditorTabs.inactive.maskColor\", // deprecated\n        \"EditorTabs.inactiveMaskColor\",\n        \"FormattedTextField.background\",\n        \"GutterTooltip.borderColor\", // deprecated\n        \"GutterTooltip.lineSeparatorColor\",\n        \"HeaderColor.active\", // deprecated\n        \"HelpTooltip.background\",\n        \"HelpTooltip.backgroundColor\", // deprecated\n        \"inactiveCaptionBorder\",\n        \"intellijlaf.background\", // deprecated\n        \"InplaceRefactoringPopup.borderColor\",\n        \"InternalFrame.inactiveTitleBackground\",\n        \"material.background\",\n        \"material.tab.backgroundColor\",\n        \"MenuBar.background\",\n        \"MenuBar.borderColor\",\n        \"MenuBar.disabledBackground\",\n        \"MenuBar.highlight\",\n        \"MenuBar.shadow\",\n        \"MlModelBinding.Viewer.CodeEditor.background\",\n        \"NavBar.borderColor\",\n        \"NewClass.Panel.background\",\n        \"OptionPane.background\",\n        \"Panel.mouseShortcutBackground\",\n        \"PasswordField.background\",\n        \"Plugins.background\",\n        \"Plugins.SearchField.background\",\n        \"Popup.Advertiser.background\",\n        \"Popup.Border.inactiveColor\", // deprecated\n        \"Popup.Header.activeBackground\",\n        \"Popup.inactiveBorderColor\",\n        \"Popup.preferences.background\", // deprecated\n        \"Popup.preferences.borderColor\", // deprecated\n        \"PopupMenu.background\",\n        \"PopupMenu.translucentBackground\",\n        \"RadioButton.background\",\n        \"RadioButton.darcula.selectionDisabledColor\", // deprecated\n        \"RadioButton.selectionDisabledColor\", // deprecated\n        \"ScrollBar.background\",\n        \"SearchEverywhere.background\", //deprecated\n        \"SearchEverywhere.Dialog.background\", //deprecated\n        \"SearchEverywhere.Header.background\",\n        \"SearchEverywhere.SearchField.Border.color\", //deprecated\n        \"SearchEverywhere.SearchField.borderColor\",\n        \"SidePanel.background\",\n        \"Slider.background\",\n        \"Spinner.background\",\n        \"SplitPane.highlight\",\n        \"StatusBar.background\", //deprecated\n        \"StatusBar.borderColor\",\n        \"StatusBar.bottomColor\", //deprecated\n        \"StatusBar.top2Color\", //deprecated\n        \"StatusBar.topColor\", //deprecated\n        \"TabbedPane.background\",\n        \"TabbedPane.borderColor\", // deprecated\n        \"TabbedPane.mt.tab.background\",\n        \"Table.background\",\n        \"Table.gridColor\",\n        \"TableHeader.background\",\n        \"TextField.background\",\n        \"TextField.borderColor\", // deprecated\n        \"TextField.focusedBorderColor\", // deprecated\n        \"TextField.hoverBorderColor\", //deprecated\n        \"TextField.separatorColorDisabled\", // deprecated\n        \"TextPane.background\",\n        \"TitlePane.inactiveBackground\",\n        \"ToolWindow.HeaderTab.underlinedTabBackground\",\n        \"ToolTip.actions.background\", // deprecated\n        \"ToolTip.Actions.background\",\n        \"tooltips.actions.settings.icon.background.color\", // deprecated\n        \"ToolWindow.header.background\", // deprecated\n        \"ToolWindow.header.closeButton.background\", // deprecated\n        \"ToolWindow.Header.inactiveBackground\",\n        \"ToolWindow.HeaderCloseButton.background\",\n        \"ToolWindow.inactive.Header.background\", // deprecated\n        \"Tree.background\",\n        \"UIDesigner.Component.background\",\n        \"UIDesigner.Panel.background\",\n        \"UIDesigner.Placeholder.background\",\n        \"UIDesigner.Preview.background\",\n        \"UIDesigner.motion.SecondaryPanel.background\",\n        \"UIDesigner.motion.motionGraph.background\",\n        \"VersionControl.FileHistory.Commit.otherBranchBackground\", // deprecated\n        \"VersionControl.FileHistory.Commit.selectedBranchBackground\",\n        \"WelcomeScreen.background\",\n        \"WelcomeScreen.borderColor\",\n        \"WelcomeScreen.headerBackground\",\n        \"WelcomeScreen.AssociatedComponent.background\",\n        \"WelcomeScreen.Details.background\",\n        \"window\"\n      ));\n  }\n\n  /**\n   * Get resources using the foreground color\n   */\n  public static Set<String> getForegroundResources() {\n    return Collections.unmodifiableSet(\n      Sets.newHashSet(\n        \"AvailableMnemonic.foreground\",\n        \"CheckBox.darcula.borderColor1\", // deprecated\n        \"CheckBox.foreground\",\n        \"CheckBoxMenuItem.foreground\",\n        \"ColorChooser.foreground\",\n        \"ComboBox.darcula.arrowButtonForeground\", // deprecated\n        \"ComboBox.ArrowButton.iconColor\",\n        \"ComboBox.foreground\",\n        \"CompletionPopup.foreground\",\n        \"Content.selectionInactiveBackground\",\n        \"CodeWithMe.Avatar.foreground\",\n        \"darcula.foreground\", // deprecated\n        \"DragAndDrop.areaForeground\",\n        \"DragAndDrop.foregroundColor\", // deprecated\n        \"Editor.foreground\",\n        \"EditorPane.foreground\",\n        \"EditorGroupsTabs.underlinedTabForeground\",\n        \"EditorTabs.active.foreground\", // deprecated\n        \"EditorTabs.selectedForeground\",\n        \"FormattedTextField.foreground\",\n        \"GotItTooltip.foreground\",\n        \"Git.Log.Ref.RemoteBranch\", // deprecated\n        \"Github.List.tallRow.foreground\", // deprecated\n        \"Group.separatorColor\",\n        \"HelpTooltip.foreground\",\n        \"HelpTooltip.textColor\", // deprecated\n        \"Hg.Log.Ref.ClosedBranch\", //deprecated\n        \"intellijlaf.foreground\", // deprecated\n        \"InternalFrame.activeTitleForeground\",\n        \"Label.foreground\",\n        \"Label.selectedDisabledForeground\",\n        \"List.foreground\",\n        \"material.branchColor\",\n        \"material.foreground\",\n        \"Menu.foreground\",\n        \"MenuBar.foreground\",\n        \"MenuItem.foreground\",\n        \"MnemonicIcon.foreground\",\n        \"NavBar.arrowColor\",\n        \"Notification.foreground\",\n        \"Notification.MoreButton.foreground\",\n        \"Notification.ToolWindow.errorForeground\",\n        \"Notification.ToolWindow.infoForeground\", // deprecated\n        \"Notification.ToolWindow.informativeForeground\",\n        \"Notification.ToolWindow.warningForeground\",\n        \"Notification.ToolWindowError.foreground\", // deprecated\n        \"Notification.ToolWindowInfo.foreground\", // deprecated\n        \"Notification.ToolWindowWarning.foreground\", // deprecated\n        \"OptionPane.messageForeground\",\n        \"ParameterInfo.foreground\",\n        \"PasswordField.foreground\",\n        \"Plugins.Button.installForeground\",\n        \"Plugins.Button.updateForeground\",\n        \"Plugins.SectionHeader.foreground\",\n        \"Popup.separatorForeground\",\n        \"Popup.Separator.foreground\", // deprecated\n        \"PopupMenu.foreground\",\n        \"RadioButton.darcula.borderColor1\", // deprecated\n        \"RadioButton.foreground\",\n        \"RadioButtonMenuItem.foreground\",\n        \"SearchEverywhere.foreground\", // deprecated\n        \"SearchResults.Repeated.File.Foreground\",\n        \"SpeedSearch.foreground\",\n        \"SpeedSearch.errorForeground\",\n        \"Spinner.foreground\",\n        \"TabbedPane.foreground\",\n        \"Table.foreground\",\n        \"Table.sortIconColor\",\n        \"TableHeader.foreground\",\n        \"TextArea.foreground\",\n        \"TextField.foreground\",\n        \"TextPane.foreground\",\n        \"TitledBorder.titleColor\",\n        \"ToggleButton.foreground\",\n        \"ToggleButton.off.foreground\", // deprecated\n        \"ToggleButton.off.background\", // deprecated\n        \"ToggleButton.offBackground\",\n        \"ToggleButton.offForeground\",\n        \"ToolBar.foreground\",\n        \"ToolTip.foreground\",\n        \"tooltips.description.title.text.color\", // deprecated\n        \"ToolWindow.HeaderTab.underlinedTabInactiveForeground\",\n        \"UIDesigner.ColorPicker.foreground\",\n        \"UIDesigner.Component.foreground\",\n        \"UIDesigner.highStroke.foreground\",\n        \"UIDesigner.percent.foreground\",\n        \"UIDesigner.Placeholder.foreground\",\n        \"UIDesigner.motion.Component.foreground\",\n        \"UIDesigner.motion.CursorTextColor.foreground\",\n        \"VersionControl.GitLog.remoteBranchIconColor\",\n        \"WelcomeScreen.captionForeground\",\n        \"WelcomeScreen.footerForeground\",\n        \"WelcomeScreen.headerForeground\"\n      ));\n  }\n\n  /**\n   * Get resources using the label color\n   */\n  public static Set<String> getTextResources() {\n    return Collections.unmodifiableSet(\n      Sets.newHashSet(\n        \"Button.foreground\",\n        \"Button.mt.foreground\",\n        \"CheckBoxMenuItem.acceleratorForeground\",\n        \"CheckBoxMenuItem.acceleratorSelectionForeground\",\n        \"CompletionPopup.grayedForeground\", //deprecated\n        \"CompletionPopup.grayForeground\", //deprcated\n        \"CompletionPopup.infoForeground\",\n        \"CompletionPopup.selectionInactiveForeground\", // deprecated\n        \"CompletionPopup.selectionInactiveInfoForeground\",\n        \"Component.infoForeground\",\n        \"Component.grayForeground\", // deprecated\n        \"controlText\",\n        \"Debugger.Variables.collectingDataForeground\",\n        \"Debugger.Variables.evaluatingExpressionForeground\",\n        \"Editor.shortcutForeground\",\n        \"Git.Log.Ref.Other\", //deprecated\n        \"Git.Log.Ref.Tag\", // deprecated\n        \"Github.List.tallRow.secondary.foreground\",\n        \"GotItTooltip.shortcutForeground\",\n        \"GutterTooltip.infoForeground\",\n        \"HelpTooltip.infoForeground\",\n        \"HelpTooltip.shortcutForeground\",\n        \"HelpTooltip.shortcutTextColor\", // deprecated\n        \"Hg.Log.Ref.LocalTag\", //deprecated\n        \"Hg.Log.Ref.MqTag\", //deprecated\n        \"Hg.Log.Ref.Tag\", //deprecated\n        \"inactiveCaptionText\", // deprecated\n        \"infoText\", // deprecated\n        \"infoPanelForeground\",\n        \"InternalFrame.inactiveTitleForeground\", // deprecated\n        \"Label.grayForeground\", // deprecated\n        \"Label.infoForeground\",\n        \"Label.textForeground\", // deprecated\n        \"Link.secondaryForeground\",\n        \"material.primaryColor\",\n        \"material.tagColor\",\n        \"Menu.acceleratorForeground\",\n        \"MenuItem.acceleratorForeground\",\n        \"ParameterInfo.ContextHelp.foreground\", // deprecated\n        \"ParameterInfo.infoForeground\",\n        \"RadioButtonMenuItem.acceleratorForeground\",\n        \"RadioButtonMenuItem.acceleratorSelectionForeground\",\n        \"SearchEverywhere.shortcutForeground\", // deprecated\n        \"SearchEverywhere.List.separatorForeground\",\n        \"SearchResults.Ordinal.File.Foreground\",\n        \"Table.lightSelectionInactiveForeground\",\n        \"text\",\n        \"textInactiveText\",\n        \"textText\",\n        \"TitlePane.infoForeground\",\n        \"ToolBar.borderHandleColor\",\n        \"ToolBar.floatingForeground\",\n        \"ToolTip.Actions.grayForeground\", // deprecated\n        \"ToolTip.Actions.infoForeground\",\n        \"ToolTip.infoForeground\",\n        \"ToolTip.shortcutForeground\",\n        \"tooltips.actions.keymap.text.color\", //deprecated\n        \"Tree.foreground\",\n        \"UIDesigner.Label.foreground\",\n        \"UIDesigner.stroke.acceleratorForeground\",\n        \"UIDesigner.motion.SecondaryPanel.header.foreground\",\n        \"UIDesigner.motion.ConstraintSetText.foreground\",\n        \"UIDesigner.motion.ourCS_TextColor.foreground\",\n        \"UIDesigner.motion.cs_FocusText.infoForeground\",\n        \"UIDesigner.Panel.graphLabel\",\n        \"VersionControl.GitLog.otherIconColor\",\n        \"VersionControl.GitLog.tagIconColor\",\n        \"VersionControl.HgLog.localTagIconColor\",\n        \"VersionControl.HgLog.mqTagIconColor\",\n        \"VersionControl.HgLog.tagIconColor\",\n        \"VersionControl.HgLog.tipIconColor\",\n        \"VersionControl.Log.Commit.unmatchedForeground\"\n      ));\n  }\n\n  /**\n   * Get resources using the selection background color\n   */\n  public static Set<String> getSelectionBackgroundResources() {\n    return Collections.unmodifiableSet(\n      Sets.newHashSet(\n        \"AssignedMnemonic.borderColor\",\n        \"Autocomplete.selectionBackground\", // deprecated\n        \"CheckBoxMenuItem.selectionBackground\",\n        \"CompletionPopup.selectionBackground\",\n        \"Content.selectionBackground\",\n        \"EditorPane.selectionBackground\",\n        \"Github.List.tallRow.selectionBackground\",\n        \"List.selectionBackground\",\n        \"Menu.selectionBackground\",\n        \"MenuItem.selectionBackground\",\n        \"Plugins.selectionBackground\", // deprecated\n        \"RadioButtonMenuItem.selectionBackground\",\n        \"TabbedPane.selected\", // deprecated\n        \"UIDesigner.motion.CSPanel.SelectedFocusBackground\",\n        \"WelcomeScreen.Projects.selectionBackground\",\n        \"material.selectionBackground\"\n      ));\n  }\n\n  public static Set<String> getSelectionTransparentBackgroundResources() {\n    return Collections.unmodifiableSet(\n      Sets.newHashSet(\n        \"List.selectionInactiveBackground\",\n        \"TitlePane.Button.hoverBackground\"\n      ));\n  }\n\n  /**\n   * Get resources using the selection foreground color\n   */\n  public static Set<String> getSelectionForegroundResources() {\n    return Collections.unmodifiableSet(\n      Sets.newHashSet(\n        \"AssignedMnemonic.foreground\",\n        \"Button.darcula.selectedButtonForeground\", // deprecated\n        \"Button.default.foreground\",\n        \"Button.highlight\",\n        \"Button.mt.selectedForeground\",\n        \"CheckBoxMenuItem.selectionForeground\",\n        \"ComboBox.selectionForeground\",\n        \"CompletionPopup.selectedForeground\", //deprecated\n        \"CompletionPopup.selectionForeground\", // deprecated\n        \"CompletionPopup.selectedGrayedForeground\", //deprecated\n        \"CompletionPopup.selectionGrayForeground\", // deprecated\n        \"CompletionPopup.selectionInfoForeground\", // deprecated\n        \"Counter.foreground\",\n        \"CurrentMnemonic.foreground\",\n        \"DefaultTabs.underlinedTabForeground\",\n        \"EditorPane.selectionForeground\",\n        \"EditorTabs.underlinedTabForeground\",\n        \"FormattedTextField.selectionForeground\",\n        \"Github.List.tallRow.selectionForeground\", // deprecated\n        \"Github.List.tallRow.selectionForeground.unfocused\", //deprecated\n        \"Label.selectedForeground\",\n        \"List.selectionForeground\",\n        \"List.selectionInactiveForeground\",\n        \"Menu.acceleratorSelectionForeground\",\n        \"Menu.selectionForeground\",\n        \"MenuItem.acceleratorSelectionForeground\",\n        \"MenuItem.selectionForeground\",\n        \"PasswordField.selectionForeground\",\n        \"Plugins.selectionForeground\", // deprecated\n        \"Plugins.Tab.active.foreground\", // deprecated\n        \"Plugins.Tab.selectedForeground\",\n        \"SearchEverywhere.Tab.active.foreground\", // deprecated\n        \"SearchEverywhere.Tab.selectedForeground\",\n        \"SearchEverywhere.Tab.selected.foreground\", // deprecated\n        \"TabbedPane.selectedForeground\", // deprecated\n        \"Table.focusCellForeground\",\n        \"Table.lightSelectionForeground\",\n        \"Table.selectionForeground\",\n        \"TableHeader.focusCellForeground\",\n        \"TextArea.selectionForeground\",\n        \"TextField.selectionForeground\",\n        \"TextPane.selectionForeground\",\n        \"ToolWindow.Button.selectedForeground\",\n        \"ToolWindow.HeaderTab.underlinedTabForeground\",\n        \"Tree.selectionForeground\",\n        \"Tree.selectionInactiveForeground\",\n        \"UIDesigner.Placeholder.selectedForeground\",\n        \"UIDesigner.motion.ourCS_SelectedFocusBackground.selectionForeground\",\n        \"VersionControl.Ref.foreground\", //deprecated\n        \"VersionControl.RefLabel.foreground\",\n        \"VersionControl.HgLog.bookmarkIconColor\",\n        \"material.selectionForeground\"\n      ));\n  }\n\n  /**\n   * Get resources using the button color\n   */\n  public static Set<String> getButtonColorResources() {\n    return Collections.unmodifiableSet(\n      Sets.newHashSet(\n        \"StateWidget.activeBackground\",\n        \"ActionButton.hoverSeparatorColor\",\n        \"AvailableMnemonic.background\",\n        \"AvailableMnemonic.borderColor\",\n        \"Button.background\", // deprecated\n        \"Button.darcula.borderColor\", // deprecated\n        \"Button.darcula.defaultBorderColor\", // deprecated\n        \"Button.darcula.defaultEndColor\", // deprecated\n        \"Button.darcula.defaultOutlineColor\", // deprecated\n        \"Button.darcula.defaultStartColor\", // deprecated\n        \"Button.darcula.disabledBorderColor\", // deprecated\n        \"Button.darcula.endColor\", // deprecated\n        \"Button.darcula.outlineColor\", // deprecated\n        \"Button.darcula.smallComboButtonBackground\", // deprecated\n        \"Button.darcula.startColor\", // deprecated\n        \"Button.default.borderColor\", // deprecated\n        \"Button.endBackground\",\n        \"Button.mt.background\",\n        \"Button.mt.color1\", // deprecated\n        \"Button.mt.color2\", // deprecated\n        \"Button.select\", // deprecated\n        \"Button.startBackground\",\n        \"ComboBoxButton.background\",\n        \"ComboBox.ArrowButton.background\",\n        \"ComboBox.buttonBackground\",\n        \"DefaultTabs.inactiveColoredFileBackground\",\n        \"GotItTooltip.startBackground\",\n        \"GotItTooltip.endBackground\",\n        \"GotItTooltip.startBorderColor\",\n        \"GotItTooltip.endBorderColor\",\n        \"material.mergeCommits\",\n        \"Notification.MoreButton.background\",\n        \"Notification.MoreButton.innerBorderColor\",\n        \"Outline.color\", // deprecated\n        \"Plugins.Button.installBackground\",\n        \"Plugins.Button.installBorderColor\",\n        \"Plugins.Button.installFillBackground\",\n        \"Plugins.Button.updateBorderColor\",\n        \"ToggleButton.borderColor\",\n        \"ToggleButton.buttonColor\",\n        \"ToolBar.comboBoxButtonBackground\", // deprecated\n        \"WelcomeScreen.groupIconBorderColor\"\n      ));\n  }\n\n  /**\n   * Get resources using the secondary background color\n   */\n  public static Set<String> getSecondaryBackgroundResources() {\n    return Collections.unmodifiableSet(\n      Sets.newHashSet(\n        \"CompletionPopup.background\",\n        \"Checkbox.Background.Disabled\",\n        \"Checkbox.Background.Disabled.Dark\",\n        \"Checkbox.Border.Disabled\",\n        \"Checkbox.Border.Disabled.Dark\",\n        \"CodeWithMe.AccessEnabled.pillBackground\",\n        \"CodeWithMe.AccessEnabled.dropdownBorder\",\n        \"EditorGroupsTabs.borderColor\",\n        \"EditorTabs.borderColor\",\n        \"inactiveCaption\",\n        \"List.background\",\n        \"MemoryIndicator.allocatedBackground\",\n        \"MemoryIndicator.unusedColor\", // deprecated\n        \"Menu.borderColor\",\n        \"ParameterInfo.background\",\n        \"Plugins.SectionHeader.background\",\n        \"Popup.separatorColor\",\n        \"Separator.background\",\n        \"Separator.foreground\",\n        \"Separator.separatorColor\",\n        \"Slider.tickColor\",\n        \"Space.Review.diffAnchorBackground\",\n        \"Table.lightSelectionInactiveBackground\",\n        \"TextArea.background\",\n        \"Toolbar.Floating.background\",\n        \"ToolWindow.active.Header.background\",\n        \"ToolWindow.Header.background\",\n        \"ToolWindow.header.active.background\", //deprecated\n        \"ToolWindow.header.border.background\", //deprecated\n        \"ToolWindow.Header.borderColor\",\n        \"UIDesigner.ColorPicker.background\",\n        \"UIDesigner.motion.ourAvg.background\",\n        \"UIDesigner.motion.ConstraintSet.background\",\n        \"UIDesigner.motion.ourCS.background\",\n        \"WelcomeScreen.SidePanel.background\",\n        \"WelcomeScreen.Projects.background\",\n        \"WelcomeScreen.Projects.selectionInactiveBackground\"\n      ));\n  }\n\n  /**\n   * Get resources using the disabled color\n   */\n  public static Set<String> getDisabledResources() {\n    return Collections.unmodifiableSet(\n      Sets.newHashSet(\n        \"Button.disabledText\",\n        \"CheckBox.darcula.checkSignColorDisabled\", // deprecated\n        \"CheckBox.darcula.disabledBorderColor1\", // deprecated\n        \"CheckBox.darcula.disabledBorderColor2\", // deprecated\n        \"CheckBox.disabledText\",\n        \"CheckBoxMenuItem.disabledForeground\",\n        \"ComboBox.ArrowButton.disabledIconColor\",\n        \"ComboBox.darcula.arrowButtonDisabledForeground\", // deprecated\n        \"ComboBox.disabledForeground\",\n        \"Component.disabledBorderColor\",\n        \"EditorPane.inactiveForeground\",\n        \"FormattedTextField.inactiveForeground\",\n        \"Label.disabledForeground\",\n        \"Label.disabledForegroundColor\", // deprecated\n        \"Label.disabledShadow\", // deprecated\n        \"Label.disabledText\",\n        \"Menu.disabledForeground\",\n        \"MenuBar.disabledForeground\",\n        \"MenuItem.disabledForeground\",\n        \"Outline.disabledColor\", // deprecated\n        \"ParameterInfo.disabledColor\", //deprecated\n        \"ParameterInfo.disabledForeground\",\n        \"PasswordField.inactiveForeground\",\n        \"Plugins.disabledForeground\",\n        \"Plugins.Button.installFillForeground\",\n        \"RadioButton.disabledText\",\n        \"RadioButtonMenuItem.disabledForeground\",\n        \"SearchEverywhere.SearchField.grayForeground\", // deprecated\n        \"SearchEverywhere.SearchField.infoForeground\",\n        \"TabbedPane.disabledForeground\",\n        \"TabbedPane.disabledText\", // deprecated\n        \"TabbedPane.disabledUnderlineColor\",\n        \"TabbedPane.selectedDisabledColor\",\n        \"TableHeader.disabledForeground\",\n        \"Table.disabledForeground\",\n        \"TextArea.inactiveForeground\",\n        \"TextField.inactiveForeground\",\n        \"TextPane.inactiveForeground\",\n        \"TitlePane.inactiveInfoForeground\",\n        \"ToggleButton.disabledText\",\n        \"UIDesigner.motion.HoverColor.disabledBackground\",\n        \"VersionControl.HgLog.closedBranchIconColor\"\n      ));\n  }\n\n  /**\n   * Get resources using the contrast color\n   */\n  public static Set<String> getContrastResources() {\n    return Collections.unmodifiableSet(\n      Sets.newHashSet(\n        \"Content.background\",\n        \"DefaultTabs.hoverColor\",\n        \"DefaultTabs.inactiveMaskColor\",\n        \"EditorPane.background\",\n        \"HeaderColor.inactive\", // deprecated\n        \"material.contrast\",\n        \"NewClass.SearchField.background\",\n        \"Popup.Border.color\", // deprecated\n        \"Popup.borderColor\",\n        \"Popup.Header.inactiveBackground\",\n        \"Popup.Toolbar.background\",\n        \"Popup.Toolbar.Border.color\", // deprecated\n        \"Popup.Toolbar.borderColor\",\n        \"Popup.Toolbar.Floating.background\",\n        \"ScrollBar.thumb\",\n        \"SearchEverywhere.Advertiser.background\",\n        \"SearchEverywhere.SearchField.background\",\n        \"Table.stripeColor\",\n        \"Table.stripedBackground\", // deprecated\n        \"Table.alternativeRowBackground\",\n        \"TitlePane.background\",\n        \"ToolBar.background\",\n        \"ToolWindow.Button.selectedBackground\",\n        \"ToolWindow.header.tab.selected.active.background\", // deprecated\n        \"ToolWindow.header.tab.selected.background\", // deprecated\n        \"ToolWindow.HeaderTab.selectedInactiveBackground\",\n        \"ToolWindow.HeaderTab.selectedBackground\",\n        \"ToolWindow.inactive.HeaderTab.background\", // deprecated\n        \"ToolWindow.active.HeaderTab.background\", // deprecated\n        \"ToolWindow.HeaderTab.underlinedTabInactiveBackground\",\n        \"UIDesigner.Canvas.background\",\n        \"UIDesigner.motion.PrimaryPanel.background\",\n        \"UIDesigner.motion.SecondaryPanel.header.background\",\n        \"VersionControl.Log.Commit.currentBranchBackground\",\n        \"WelcomeScreen.captionBackground\",\n        \"WelcomeScreen.footerBackground\",\n        \"WelcomeScreen.List.background\",\n        \"WelcomeScreen.Projects.actions.background\"\n      ));\n  }\n\n  /**\n   * Get resources using the table/button selection color\n   */\n  public static Set<String> getTableSelectedResources() {\n    return Collections.unmodifiableSet(\n      Sets.newHashSet(\n        \"Button.darcula.defaultFocusedBorderColor\", // deprecated\n        \"Button.darcula.focusedBorderColor\", // deprecated\n        \"Button.darcula.selection.color1\", // deprecated\n        \"Button.darcula.selection.color2\", // deprecated\n        \"Button.mt.selection.color1\",\n        \"Button.mt.selection.color2\",\n        \"Button.default.startBackground\",\n        \"Button.default.endBackground\",\n        \"Button.focus\", // deprecated\n        \"ComboBox.selectionBackground\",\n        \"DebuggerTabs.underlinedTabBackground\",\n        \"DefaultTabs.hoverBackground\",\n        \"DefaultTabs.underlinedTabBackground\",\n        \"EditorGroupsTabs.underlinedTabBackground\",\n        \"EditorTabs.underlinedTabBackground\",\n        \"EditorTabs.active.background\", // deprecated\n        \"EditorTabs.selectedBackground\",\n        \"FormattedTextField.selectionBackground\",\n        \"List.hoverInactiveBackground\",\n        \"ParameterInfo.borderColor\",\n        \"ParameterInfo.lineSeparatorColor\",\n        \"PasswordField.selectionBackground\",\n        \"Plugins.Tab.active.background\", // deprecated\n        \"Plugins.Tab.selectedBackground\",\n        \"Plugins.Tab.hover.background\", // deprecated\n        \"Plugins.Tab.hoverBackground\",\n        \"Plugins.lightSelectionBackground\",\n        \"SearchOption.selectedBackground\",\n        \"Slider.track\", // deprecated\n        \"Slider.trackColor\",\n        \"StatusBar.LightEditBackground\",\n        \"TabbedPane.focusColor\",\n        \"Table.highlightOuter\",\n        \"Table.hoverInactiveBackground\",\n        \"Table.focusCellBackground\",\n        \"Table.lightSelectionBackground\", // deprecated\n        \"Table.selectionBackground\",\n        \"TextArea.selectionBackground\",\n        \"TextField.selectionBackground\",\n        \"TextPane.selectionBackground\",\n        \"Tree.hoverInactiveBackground\",\n        \"Tree.selectionInactiveBackground\",\n        \"Table.selectionInactiveBackground\",\n        \"ToolWindow.HeaderTab.underlinedTabBackground\",\n        \"UIDesigner.motion.ourCS_SelectedBackground.selectionInactiveBackground\",\n        \"ToolWindow.Button.hoverBackground\"\n      ));\n  }\n\n  /**\n   * Get resources using the second border color\n   */\n  public static Set<String> getSecondBorderResources() {\n    return Collections.unmodifiableSet(\n      Sets.newHashSet(\n        \"Borders.color\",\n        \"Button.darcula.disabledOutlineColor\", // deprecated\n        \"Button.darcula.shadowColor\", // deprecated\n        \"Button.disabledBorderColor\",\n        \"Button.shadowColor\",\n        \"Canvas.Tooltip.borderColor\",\n        \"ComboPopup.border\",\n        \"Group.disabledSeparatorColor\",\n        \"HelpTooltip.borderColor\",\n        \"InformationHint.borderColor\",\n        \"Menu.separatorColor\",\n        \"OnePixelDivider.background\", // deprecated\n        \"Plugins.SearchField.borderColor\",\n        \"Popup.Separator.color\", // deprecated\n        \"SearchEverywhere.List.Separator.Color\", // deprecated\n        \"SearchEverywhere.List.Separator.foreground\", // deprecated\n        \"SearchEverywhere.List.separatorColor\",\n        \"ScreenView.borderColor\",\n        \"SpeedSearch.borderColor\",\n        \"TabbedPane.darkShadow\", // deprecated\n        \"TabbedPane.highlight\", // deprecated\n        \"TabbedPane.shadow\", // deprecated\n        \"TableHeader.bottomSeparatorColor\",\n        \"TableHeader.separatorColor\",\n        \"ToolTip.borderColor\",\n        \"Tooltip.separatorColor\",\n        \"Tree.hash\",\n        \"UIDesigner.Panel.secondaryGraphLines\",\n        \"UIDesigner.Activity.borderColor\",\n        \"UIDesigner.Component.borderColor\",\n        \"UIDesigner.Connector.borderColor\",\n        \"UIDesigner.Panel.borderColor\",\n        \"UIDesigner.Placeholder.borderColor\",\n        \"UIDesigner.motion.timeLine.disabledBorderColor\",\n        \"UIDesigner.motion.borderColor\",\n        \"UIDesigner.motion.ourCS_Border.borderColor\",\n        \"UIDesigner.motion.ourML_BarColor.separatorColor\",\n        \"WelcomeScreen.separatorColor\",\n        \"windowBorder\"\n      ));\n  }\n\n  /**\n   * Get resources using the highlight color\n   */\n  public static Set<String> getHighlightResources() {\n    return Collections.unmodifiableSet(\n      Sets.newHashSet(\n        \"AssignedMnemonic.background\",\n        \"Autocomplete.selectionUnfocus\", // deprecated\n        \"CheckBox.darcula.inactiveFillColor\", // deprecated\n        \"CompletionPopup.selectionInactiveBackground\",\n        \"Component.focusedBorderColor\",\n        \"Component.borderColor\",\n        \"Checkbox.Border.Default\",\n        \"Checkbox.Border.Default.Dark\",\n        \"DefaultTabs.hoverColor\", // not implemented\n        \"DefaultTabs.hoverMaskColor\", // not implemented\n        \"DebuggerTabs.active.background\", // deprecated\n        \"DebuggerTabs.selectedBackground\", // deprecated\n        \"EditorGroupsTabs.hoverBackground\",\n        \"EditorGroupsTabs.hoverColor\",\n        \"EditorTabs.hoverBackground\",\n        \"EditorTabs.hoverColor\", // deprecated\n        \"EditorTabs.hoverMaskColor\",\n        \"Focus.color\", // deprecated\n        \"Github.List.tallRow.selectionBackground.unfocused\", // deprecated\n        \"MemoryIndicator.usedColor\", // deprecated\n        \"MemoryIndicator.usedBackground\",\n        \"MnemonicIcon.borderColor\",\n        \"MnemonicIcon.background\",\n        \"Outline.focusedColor\", // deprecated\n        \"ParameterInfo.currentOverloadBackground\",\n        \"Plugins.Button.installFocusedBackground\",\n        \"Plugins.eapTagBackground\",\n        \"Plugins.paidTagBackground\",\n        \"Plugins.tagBackground\",\n        \"Plugins.trialTagBackground\",\n        \"ProgressBar.halfColor\", // deprecated\n        \"ProgressBar.trackColor\",\n        \"ProgressBar.selectionBackground\",\n        \"SearchEverywhere.Tab.active.background\", // deprecated\n        \"SearchEverywhere.Tab.selectedBackground\",\n        \"SearchEverywhere.Tab.selected.background\", // deprecated\n        \"SpeedSearch.background\",\n        \"Slider.trackDisabled\", // deprecated\n        \"StatusBar.hoverBackground\",\n        \"TabbedPane.contentAreaColor\",\n        \"TabbedPane.hoverColor\",\n        \"TabbedPane.selectHighlight\", // deprecated\n        \"TabbedPane.selectedColor\", // deprecated\n        \"TableHeader.borderColor\", // deprecated\n        \"TextField.separatorColor\", // deprecated\n        \"UIDesigner.Panel.graphLines\",\n        \"ToolWindow.HeaderTab.hoverBackground\",\n        \"ToolWindow.HeaderTab.borderColor\",\n        \"ToolWindow.HeaderTab.hoverInactiveBackground\",\n        \"UIDesigner.Connector.hoverBorderColor\",\n        \"UIDesigner.Component.hoverBorderColor\",\n        \"UIDesigner.motion.light.borderColor\",\n        \"UIDesigner.motion.hoverBorderColor\",\n        \"UIDesigner.motion.ourCS_SelectedBorder.pressedBorderColor\",\n        \"VersionControl.GitCommits.graphColor\",\n        \"VersionControl.Ref.backgroundBase\", //deprecated\n        \"VersionControl.RefLabel.backgroundBase\",\n        \"WelcomeScreen.Projects.actions.selectionBackground\"\n      ));\n  }\n\n  /**\n   * Get resources using the tree selected row color\n   */\n  public static Set<String> getTreeSelectionResources() {\n    return Collections.unmodifiableSet(\n      Sets.newHashSet(\n        \"List.hoverBackground\",\n        \"Table.hoverBackground\",\n        \"Tree.hoverBackground\",\n        \"Plugins.hoverBackground\",\n        \"Tree.selectionBackground\",\n        \"UIDesigner.List.selectionBackground\",\n        \"UIDesigner.motion.CSPanel.SelectedBackground\",\n        \"VersionControl.Log.Commit.hoveredBackground\"\n      ));\n  }\n\n  /**\n   * Get notifications colors resources\n   */\n  public static Set<String> getNotificationsResources() {\n    return Collections.unmodifiableSet(\n      Sets.newHashSet(\n        \"Canvas.Tooltip.background\",\n        \"GotItTooltip.borderColor\",\n        \"GotItTooltip.background\",\n        \"Notification.background\",\n        \"Notification.borderColor\",\n        \"Notifications.background\", // deprecated\n        \"Notifications.borderColor\", // deprecated\n        \"SearchField.errorBackground\",\n        \"ToolTip.background\",\n        \"ValidationTooltip.errorBackground\",\n        \"ValidationTooltip.errorBackgroundColor\", // deprecated\n        \"ValidationTooltip.errorBorderColor\",\n        \"ValidationTooltip.warningBackground\",\n        \"ValidationTooltip.warningBackgroundColor\", // deprecated\n        \"ValidationTooltip.warningBorderColor\",\n        \"UIDesigner.motion.Notification.background\"\n      ));\n  }\n\n  public static Set<String> getExcludedResources() {\n    return Collections.unmodifiableSet(\n      Sets.newHashSet(\n        \"FileColor.excluded\"\n      ));\n  }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/mallowigi/idea/themes/lists/MTThemeResources.java b/src/main/java/com/mallowigi/idea/themes/lists/MTThemeResources.java
--- a/src/main/java/com/mallowigi/idea/themes/lists/MTThemeResources.java	(revision ab6db325159d89e283a5dd4e1433736c27126c06)
+++ b/src/main/java/com/mallowigi/idea/themes/lists/MTThemeResources.java	(date 1620397792845)
@@ -399,7 +399,6 @@
         "AssignedMnemonic.borderColor",
         "Autocomplete.selectionBackground", // deprecated
         "CheckBoxMenuItem.selectionBackground",
-        "CompletionPopup.selectionBackground",
         "Content.selectionBackground",
         "EditorPane.selectionBackground",
         "Github.List.tallRow.selectionBackground",
Index: src/main/java/com/mallowigi/idea/utils/MTUI.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*\n * The MIT License (MIT)\n *\n * Copyright (c) 2015-2021 Elior \"Mallowigi\" Boukhobza\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n *\n *\n */\n\npackage com.mallowigi.idea.utils;\n\nimport com.intellij.ide.ui.laf.darcula.DarculaLaf;\nimport com.intellij.ide.ui.laf.darcula.DarculaUIUtil;\nimport com.intellij.ui.ColorUtil;\nimport com.intellij.ui.Gray;\nimport com.intellij.ui.JBColor;\nimport com.intellij.util.ui.JBInsets;\nimport com.intellij.util.ui.JBUI;\nimport com.intellij.util.ui.UIUtil;\nimport com.mallowigi.idea.MTConfig;\nimport org.jetbrains.annotations.NonNls;\nimport org.jetbrains.annotations.NotNull;\nimport sun.swing.SwingUtilities2;\n\nimport javax.swing.*;\nimport javax.swing.border.Border;\nimport javax.swing.plaf.ColorUIResource;\nimport java.awt.*;\nimport java.awt.geom.Path2D;\n\n@SuppressWarnings(\"DuplicateStringLiteralInspection\")\npublic enum MTUI {\n  SAYONARA;\n\n  @SuppressWarnings({\"MagicNumber\",\n    \"unused\"})\n  public enum Tree {\n    MARIJUANA;\n\n    @NonNls\n    private static final String TREE_SELECTION_BACKGROUND = \"Tree.selectionBackground\";\n\n    @NotNull\n    public static Color getSelectionBackground() {\n      final Color color = JBColor.namedColor(TREE_SELECTION_BACKGROUND, new JBColor(0x27384C, 0x0D293E));\n      return ColorUtil.withAlpha(color, 0.25);\n    }\n\n    public static Color getSelectionInactiveBackground() {\n      final Color color = JBColor.namedColor(TREE_SELECTION_BACKGROUND, new JBColor(0x27384C, 0x0D293E));\n      return ColorUtil.withAlpha(color, 0.25);\n    }\n  }\n\n  @SuppressWarnings({\"StaticMethodOnlyUsedInOneClass\",\n    \"MagicNumber\",\n    \"unused\"})\n  public enum ActionButton {\n    FIGHT;\n\n    @NonNls\n    public static final String ACTION_BUTTON_HOVER_BACKGROUND = \"ActionButton.hoverBackground\";\n    @NonNls\n    public static final String ACTION_BUTTON_HOVER_BORDER_COLOR = \"ActionButton.hoverBorderColor\";\n\n    @NotNull\n    public static Color getHoverBackground() {\n      return JBColor.namedColor(ACTION_BUTTON_HOVER_BACKGROUND, new JBColor(0xdfdfdf, 0x4c5052));\n    }\n\n    @NotNull\n    public static Color getHoverBorderColor() {\n      return JBColor.namedColor(ACTION_BUTTON_HOVER_BORDER_COLOR, new JBColor(0xdfdfdf, 0x4c5052));\n    }\n  }\n\n  @SuppressWarnings({\"unused\",\n    \"MagicNumber\"\n  })\n  public enum Button {\n    BOTON;\n\n    @NonNls\n    public static final String BUTTON_DISABLED_TEXT = \"Button.disabledText\";\n    @NonNls\n    static final String BUTTON_BACKGROUND = \"Button.background\";\n    @NonNls\n    private static final String BUTTON_FOREGROUND = \"Button.foreground\";\n    @NonNls\n    private static final String BUTTON_PRIMARY_BACKGROUND = \"Button.default.startBackground\";\n    @NonNls\n    private static final String BUTTON_PRIMARY_FOREGROUND = \"Button.default.foreground\";\n    @NonNls\n    private static final String BUTTON_SELECTED_BACKGROUND = \"Button.focus\";\n    @NonNls\n    private static final String BUTTON_SELECTED_FOREGROUND = \"Button.default.foreground\";\n    @NonNls\n    private static final String BUTTON_DISABLED_TEXT_SHADOW = \"Button.default.shadowColor\";\n    @NonNls\n    public static final String NO_BORDER = \"MTButton.noBorder\";\n\n    public static Color getBackgroundColor() {\n      return JBColor.namedColor(BUTTON_BACKGROUND, new JBColor(0xf2f2f2, 0x3c3f41));\n    }\n\n    public static Color getPrimaryBackgroundColor() {\n      return JBColor.namedColor(BUTTON_PRIMARY_BACKGROUND, new JBColor(0x4A86C7, 0x365880));\n    }\n\n    public static Color getPrimaryForegroundColor() {\n      return JBColor.namedColor(BUTTON_PRIMARY_FOREGROUND, new JBColor(0xf0f0f0, 0xbbbbbb));\n    }\n\n    public static Color getForegroundColor() {\n      return JBColor.namedColor(BUTTON_FOREGROUND, new JBColor(0x000000, 0xbbbbbb));\n    }\n\n    public static Color getSelectedBackgroundColor() {\n      return JBColor.namedColor(BUTTON_SELECTED_BACKGROUND, new JBColor(0x97c3f3, 0x43688c));\n    }\n\n    public static Color getSelectedForegroundColor() {\n      return JBColor.namedColor(BUTTON_SELECTED_FOREGROUND, new JBColor(0xf0f0f0, 0xbbbbbb));\n    }\n\n    public static Color getDisabledShadowColor() {\n      return JBColor.namedColor(BUTTON_DISABLED_TEXT_SHADOW, new JBColor(0xa6a6a680, 0x36363680));\n    }\n\n    public static Color getDisabledColor() {\n      return JBColor.namedColor(BUTTON_DISABLED_TEXT, new JBColor(0x999999, 0x777777));\n    }\n  }\n\n  @SuppressWarnings({\"unused\",\n    \"MagicNumber\"})\n  public enum TextField {\n    SEXTFIELD;\n\n    @NonNls\n    public static final String TEXT_FIELD_SEPARATOR_COLOR_DISABLED = \"Component.disabledBorderColor\";\n    @NonNls\n    private static final String TEXT_FIELD_SEPARATOR_COLOR = \"Component.borderColor\";\n    @NonNls\n    private static final String TEXT_FIELD_SELECTED_SEPARATOR_COLOR = \"Component.focusedBorderColor\";\n\n    public static Color getBorderColor(final boolean enabled) {\n      final JBColor borderColor = JBColor.namedColor(TEXT_FIELD_SEPARATOR_COLOR, new JBColor(0xc4c4c4, 0x646464));\n      final JBColor disabledColor = JBColor.namedColor(TEXT_FIELD_SEPARATOR_COLOR_DISABLED, new JBColor(0xcfcfcf, 0x646464));\n\n      return enabled ? borderColor : disabledColor;\n    }\n\n    public static Color getSelectedBorderColor() {\n      return JBColor.namedColor(TEXT_FIELD_SELECTED_SEPARATOR_COLOR, new JBColor(0x87AFDA, 0x466D94));\n    }\n  }\n\n  @SuppressWarnings({\"StaticMethodOnlyUsedInOneClass\",\n    \"unused\"})\n  public enum List {\n    ARRAY;\n\n    @NonNls\n    public static final String LIST_SELECTION_BACKGROUND_PAINTER = \"List.sourceListSelectionBackgroundPainter\";\n    @NonNls\n    public static final String LIST_FOCUSED_SELECTION_BACKGROUND_PAINTER = \"List.sourceListFocusedSelectionBackgroundPainter\";\n\n    public static Border getListSelectionPainter() {\n      return UIManager.getBorder(LIST_SELECTION_BACKGROUND_PAINTER);\n    }\n\n    public static Border getListFocusedSelectionPainter() {\n      return UIManager.getBorder(LIST_FOCUSED_SELECTION_BACKGROUND_PAINTER);\n    }\n  }\n\n  @SuppressWarnings({\"unused\",\n    \"MagicNumber\"})\n  public enum Table {\n    CHAIR;\n\n    @NonNls\n    private static final String TABLE_HIGHLIGHT_OUTER = \"Table.highlightOuter\";\n    @NonNls\n    private static final String TABLE_HEADER_BORDER_COLOR = \"TableHeader.borderColor\";\n\n    public static Color getHighlightOuterColor() {\n      return JBColor.namedColor(TABLE_HIGHLIGHT_OUTER, new JBColor(0x79c0ff, 0x79c0ff));\n    }\n\n    public static Color getBorderColor() {\n      return JBColor.namedColor(TABLE_HEADER_BORDER_COLOR, new JBColor(0xdddddd, 0x2c2c2c));\n    }\n\n    @NotNull\n    public static Border getCellBorder() {\n      final boolean compactTables = MTConfig.getInstance().isCompactTables();\n      return compactTables ? JBUI.Borders.empty(3) : JBUI.Borders.empty(10, 5);\n    }\n  }\n\n  @SuppressWarnings(\"unused\")\n  public enum StatusBar {\n    SB;\n\n    @NonNls\n    public static final String IDE_STATUS_BAR_BORDER = \"IdeStatusBar.border\";\n  }\n\n  @SuppressWarnings({\"unused\",\n    \"MagicNumber\"})\n  public enum TabbedPane {\n    TABUU;\n\n    @NonNls\n    private static final String TABBED_PANE_SELECTED_FOREGROUND = \"TabbedPane.selectedForeground\";\n    @NonNls\n    private static final String TABBED_PANE_FOREGROUND = \"TabbedPane.foreground\";\n    @NonNls\n    private static final String TABBED_PANE_SELECTED = \"TabbedPane.selectedColor\";\n    @NonNls\n    private static final String HOVERED_TAB_BACKGROUND = \"DefaultTabs.hoverBackground\";\n    @NonNls\n    private static final String TAB_BACKGROUND = \"DefaultTabs.background\";\n    @NonNls\n    private static final String INACTIVE_TAB_BACKGROUND = \"EditorTabs.inactiveColoredFileBackground\";\n    @NonNls\n    private static final String INACTIVE_TAB_CONTRAST_BACKGROUND = \"DefaultTabs.inactiveMaskColor\";\n    @NonNls\n    private static final String TABBED_PANE_SHADOW = \"TabbedPane.shadow\";\n\n    public static Color getForeground() {\n      return JBColor.namedColor(TABBED_PANE_FOREGROUND, new JBColor(0x000000, 0xbbbbbb));\n    }\n\n    public static Color getSelectedForeground() {\n      return JBColor.namedColor(TABBED_PANE_SELECTED_FOREGROUND, new JBColor(0xffffff, 0xffffff));\n    }\n\n    public static Color getHighlightColor() {\n      return JBColor.namedColor(TABBED_PANE_SELECTED, new JBColor(0xdae4ed, 0x3d4b5c));\n    }\n\n    public static Color getHoveredBackground() {\n      return JBColor.namedColor(HOVERED_TAB_BACKGROUND, new JBColor(0xdae4ed, 0x3d4b5c));\n    }\n\n    public static Color getBackground() {\n      return JBColor.namedColor(TAB_BACKGROUND, new JBColor(0xdae4ed, 0x3d4b5c));\n    }\n\n    public static Color getInactiveBackground(final boolean isContrast) {\n      final JBColor inactiveTabBG = JBColor.namedColor(INACTIVE_TAB_BACKGROUND, new JBColor(0xdae4ed, 0x3d4b5c));\n      final JBColor inactiveContrastBG = JBColor.namedColor(INACTIVE_TAB_CONTRAST_BACKGROUND, new JBColor(0xdae4ed, 0x3d4b5c));\n      return isContrast ? inactiveContrastBG : inactiveTabBG;\n    }\n\n    public static Color getShadowColor() {\n      return JBColor.namedColor(TABBED_PANE_SHADOW, new JBColor(0xdae4ed, 0x3d4b5c));\n    }\n  }\n\n  @SuppressWarnings({\"unused\",\n    \"MagicNumber\"})\n  public enum Slider {\n    PARALLEL_WORLDS;\n\n    @NonNls\n    private static final String SLIDER_THUMB = \"Slider.thumb\";\n    @NonNls\n    private static final String SLIDER_TRACK = \"Slider.track\";\n    @NonNls\n    private static final String SLIDER_TRACK_DISABLED = \"Slider.trackDisabled\";\n\n    public static Color getThumbColor() {\n      return JBColor.namedColor(SLIDER_THUMB, new JBColor(0xc4c4c4, 0x646464));\n    }\n\n    public static Color getTrackColor() {\n      return JBColor.namedColor(SLIDER_TRACK, new JBColor(0xc4c4c4, 0x646464));\n    }\n\n    public static Color getTrackDisabledColor() {\n      return JBColor.namedColor(SLIDER_TRACK_DISABLED, new JBColor(0xcfcfcf, 0x646464));\n    }\n  }\n\n  @SuppressWarnings({\"NestedConditionalExpression\",\n    \"unused\"})\n  public enum Spinner {\n    FIDGET;\n\n    @NonNls\n    private static final String COMBO_BOX_EDITABLE_ARROW_BACKGROUND = \"ComboBox.darcula.editable.arrowButtonBackground\";\n    @NonNls\n    private static final String COMBO_BOX_ARROW_BACKGROUND = \"ComboBox.darcula.arrowButtonBackground\";\n    @NonNls\n    private static final String COMBO_BOX_DISABLED_ARROW_BACKGROUND = \"ComboBox.darcula.disabledArrowButtonBackground\";\n    @NonNls\n    private static final String COMBO_BOX_ARROW_FOREGROUND = \"ComboBox.darcula.arrowButtonForeground\";\n    @NonNls\n    private static final String COMBO_BOX_HOVERED_ARROW_FOREGROUND = \"ComboBox.darcula.hoveredArrowButtonForeground\";\n    @NonNls\n    private static final String COMBO_BOX_ARROW_DISABLED_FOREGROUND = \"ComboBox.darcula.arrowButtonDisabledForeground\";\n\n    public static Color getArrowButtonBackgroundColor(final boolean enabled, final boolean editable) {\n      return enabled ?\n             editable ?\n             JBColor.namedColor(COMBO_BOX_EDITABLE_ARROW_BACKGROUND, Gray.xFC) :\n             JBColor.namedColor(COMBO_BOX_ARROW_BACKGROUND, Gray.xFC)\n                     : JBColor.namedColor(COMBO_BOX_DISABLED_ARROW_BACKGROUND, Gray.xFC);\n    }\n\n    public static Color getArrowButtonForegroundColor(final boolean enabled, final boolean hovered) {\n      return enabled ?\n             hovered ?\n             JBColor.namedColor(COMBO_BOX_HOVERED_ARROW_FOREGROUND, Gray.x66) :\n             JBColor.namedColor(COMBO_BOX_ARROW_FOREGROUND, Gray.x66) :\n             JBColor.namedColor(COMBO_BOX_ARROW_DISABLED_FOREGROUND, Gray.xAB);\n    }\n  }\n\n  @SuppressWarnings({\"unused\",\n    \"StaticMethodOnlyUsedInOneClass\"})\n  public enum MTColor {\n    IROIRO;\n\n    public static final Color PURPLE = new ColorUIResource(0xC792EA);\n    public static final Color GREEN = new ColorUIResource(0xC3E88D);\n    public static final Color BLUE = new ColorUIResource(0x82AAFF);\n    public static final Color CYAN = new ColorUIResource(0x89DDF7);\n    public static final Color YELLOW = new ColorUIResource(0xFFCB6B);\n    public static final Color RED = new ColorUIResource(0xFF5370);\n    public static final Color ORANGE = new ColorUIResource(0xF78C6C);\n    public static final Color BROWN = new ColorUIResource(0xAB7967);\n    public static final Color PINK = new ColorUIResource(0xBB80B3);\n\n    public static final Color DARK_PURPLE = new ColorUIResource(0x1E153D);\n    public static final Color DARK_GREEN = new ColorUIResource(0x003300);\n    public static final Color DARK_BLUE = new ColorUIResource(0x002171);\n    public static final Color DARK_CYAN = new ColorUIResource(0x006064);\n    public static final Color DARK_YELLOW = new ColorUIResource(0x7a5900);\n    public static final Color DARK_RED = new ColorUIResource(0x7F0000);\n    public static final Color DARK_ORANGE = new ColorUIResource(0x894500);\n    public static final Color DARK_BROWN = new ColorUIResource(0x2F2018);\n    public static final Color DARK_PINK = new ColorUIResource(0x560027);\n  }\n\n  @SuppressWarnings(\"MagicNumber\")\n  public enum Separator {\n    DEFAULT;\n\n    @NonNls\n    private static final String SEPARATOR_SEPARATOR_COLOR = \"Separator.separatorColor\";\n\n    public static Color getSeparatorColor() {\n      return JBColor.namedColor(SEPARATOR_SEPARATOR_COLOR, new JBColor(0xcdcdcd, 0x515151));\n    }\n  }\n\n  @SuppressWarnings({\"unused\",\n    \"MagicNumber\"})\n  public enum Radio {\n    GAGA;\n\n    @NonNls\n    private static final String RADIO_BUTTON_SELECTION_ENABLED_COLOR = \"RadioButton.selectionEnabledShadowColor\";\n    @NonNls\n    private static final String RADIO_BUTTON_SELECTION_DISABLED_COLOR = \"RadioButton.selectionDisabledShadowColor\";\n    @NonNls\n    private static final String RADIO_BUTTON_BORDER_COLOR = \"RadioButton.darcula.borderColor1\";\n    @NonNls\n    private static final String RADIO_BUTTON_FOCUS_COLOR = \"RadioButton.focusColor\";\n\n    public static Color getSelectedColor(final boolean enabled) {\n      final JBColor enabledColor = JBColor.namedColor(RADIO_BUTTON_SELECTION_ENABLED_COLOR, new JBColor(0x00000040, 0x1e1e1e));\n      final JBColor disabledColor = JBColor.namedColor(RADIO_BUTTON_SELECTION_DISABLED_COLOR, new JBColor(0x00000020, 0x3c3c3c));\n\n      return enabled ? enabledColor : disabledColor;\n    }\n\n    public static Color getBorderColor() {\n      return JBColor.namedColor(RADIO_BUTTON_BORDER_COLOR, new JBColor(0xcdcdcd, 0x515151));\n    }\n\n    public static Color getFocusColor() {\n      final Color color = JBColor.namedColor(RADIO_BUTTON_FOCUS_COLOR, new JBColor(0xcfcfcf, 0xaaaaaa));\n\n      return ColorUtil.withAlpha(color, 0.5);\n    }\n  }\n\n  @SuppressWarnings(\"unused\")\n  public enum ProgressBar {\n    CHOCO;\n\n    private static final String PROGRESS_BAR_TRACK_COLOR = \"ProgressBar.trackColor\";\n    private static final String PROGRESS_BAR_PROGRESS_COLOR = \"ProgressBar.progressColor\";\n    private static final String PROGRESS_BAR_INDETERMINATE_START_COLOR = \"ProgressBar.indeterminateStartColor\";\n    private static final String PROGRESS_BAR_INDETERMINATE_END_COLOR = \"ProgressBar.indeterminateEndColor\";\n\n    @NotNull\n    public static JBColor getTrackColor() {\n      return JBColor.namedColor(PROGRESS_BAR_TRACK_COLOR, new JBColor(Gray.xC4, Gray.x55));\n    }\n\n    @NotNull\n    public static JBColor getProgressColor() {\n      return JBColor.namedColor(PROGRESS_BAR_PROGRESS_COLOR, new JBColor(Gray.x80, Gray.xA0));\n    }\n\n    @NotNull\n    public static Color getIndeterminateStartColor() {\n      return JBColor.namedColor(PROGRESS_BAR_INDETERMINATE_START_COLOR, new JBColor(Gray.xC4,\n        Gray.x69)).brighter().brighter();\n    }\n\n    @NotNull\n    public static JBColor getIndeterminateEndColor() {\n      return JBColor.namedColor(PROGRESS_BAR_INDETERMINATE_END_COLOR, new JBColor(Gray.x80,\n        Gray.x83));\n    }\n  }\n\n  @SuppressWarnings({\"unused\",\n    \"MagicNumber\"})\n  public enum Switch {\n    NINTENDO;\n\n    @NonNls\n    private static final String OFF_THUMB_COLOR = \"ToggleButton.offForeground\";\n    @NonNls\n    private static final String ON_THUMB_COLOR = \"ToggleButton.onForeground\";\n    @NonNls\n    private static final String OFF_BACKGROUND_COLOR = \"ToggleButton.offBackground\";\n    @NonNls\n    private static final String ON_BACKGROUND_COLOR = \"ToggleButton.onBackground\";\n\n    public static Color getOffThumbColor() {\n      return JBColor.namedColor(OFF_THUMB_COLOR, Gray.x77).brighter().brighter();\n    }\n\n    public static Color getOnThumbColor() {\n      return JBColor.namedColor(ON_THUMB_COLOR, Gray.xFF);\n    }\n\n    @NotNull\n    public static Color getOffSwitchColor() {\n      return JBColor.namedColor(OFF_BACKGROUND_COLOR, new JBColor(0xf2f2f2, 0x3c3f41));\n    }\n\n    public static Color getOnSwitchColor() {\n      return JBColor.namedColor(ON_BACKGROUND_COLOR, new JBColor(0x4a9249, 0x4d694c)).darker().darker();\n    }\n  }\n\n  @SuppressWarnings({\"unused\",\n    \"MagicNumber\",\n    \"StaticMethodOnlyUsedInOneClass\"})\n  public enum NavBar {\n    ALLAH;\n\n    @NonNls\n    private static final String NAVBAR_ARROW_COLOR = \"NavBar.arrowColor\";\n    @NonNls\n    private static final String NAVBAR_HIGHLIGHT_COLOR = \"NavBar.selectedColor\";\n\n    public static Color getArrowColor() {\n      return JBColor.namedColor(NAVBAR_ARROW_COLOR, Gray._100);\n    }\n\n    public static Color getHighlightColor() {\n      return ColorUtil.withAlpha(JBColor.namedColor(NAVBAR_HIGHLIGHT_COLOR, UIUtil.getListSelectionBackground(true)), 0.5);\n    }\n\n    public static int getDecorationOffset() {\n      return JBUI.scale(14);\n    }\n\n    public static int getDecorationHOffset() {\n      return JBUI.scale(9);\n    }\n\n    public static int getFirstElementLeftOffset() {\n      return JBUI.scale(6);\n    }\n  }\n\n  @SuppressWarnings({\"unused\",\n    \"MagicNumber\"})\n  public enum ComboBox {\n    CCCCOMBO;\n\n    private static final String COMBO_BOX_ARROW_BUTTON_NON_EDITABLE_BACKGROUND = \"ComboBox.ArrowButton.nonEditableBackground\";\n    private static final String COMBO_BOX_NON_EDITABLE_BACKGROUND = \"ComboBox.nonEditableBackground\";\n    private static final String COMBO_BOX_DISABLED_FOREGROUND = \"ComboBox.disabledForeground\";\n    private static final String TEXT_FIELD_BACKGROUND = \"TextField.background\";\n\n    public static Shape getArrowShape(@NotNull final Component button) {\n      final Rectangle r = new Rectangle(button.getSize());\n      JBInsets.removeFrom(r, JBUI.insets(1, 0, 1, 1));\n\n      final int tW = JBUI.scale(8);\n      final int tH = JBUI.scale(6);\n      final int xU = (r.width - tW) / 2 - JBUI.scale(1);\n      final int yU = (r.height - tH) / 2 + JBUI.scale(1);\n\n      final Path2D path = new Path2D.Float();\n      path.moveTo(xU, yU);\n      path.lineTo(xU + tW, yU);\n      path.lineTo(xU + tW / 2.0f, yU + tH);\n      path.lineTo(xU, yU);\n      path.closePath();\n      return path;\n    }\n\n    public static Color getArrowButtonBackgroundColor(final boolean enabled) {\n      final Color color = JBColor.namedColor(COMBO_BOX_ARROW_BUTTON_NON_EDITABLE_BACKGROUND, new JBColor(0xffffff, 0x3c3f41));\n      return enabled ? color : UIUtil.getPanelBackground();\n    }\n\n    public static Color getNonEditableBackground() {\n      return JBColor.namedColor(COMBO_BOX_NON_EDITABLE_BACKGROUND, new JBColor(0xffffff, 0x3c3f41));\n    }\n\n    public static Color getDisabledForeground() {\n      return JBColor.namedColor(COMBO_BOX_DISABLED_FOREGROUND, new JBColor(0xb1b1b1, 0xb1b1b1));\n    }\n\n    public static Color getFallbackBackground() {\n      return JBColor.namedColor(Button.BUTTON_BACKGROUND, new JBColor(0xf2f2f2, 0x3c3f41));\n    }\n\n    public static Color getDisabledBackground() {\n      return JBColor.namedColor(Button.BUTTON_BACKGROUND, new JBColor(0xf2f2f2, 0x3c3f41));\n    }\n\n    public static Color getEnabledBackground() {\n      return JBColor.namedColor(TEXT_FIELD_BACKGROUND, new JBColor(0xffffff, 0x45494A));\n    }\n  }\n\n  @SuppressWarnings({\"unused\",\n    \"MagicNumber\",\n    \"StaticMethodOnlyUsedInOneClass\"})\n  public enum CheckBox {\n    CHECK1212;\n\n    private static Color getColor(@NonNls final String shortPropertyName, @NotNull final Color defaultValue) {\n      return JBColor.namedColor(\"Checkbox.\" + shortPropertyName, defaultValue);\n    }\n\n    private static Color getColor(@NonNls final String shortPropertyName,\n                                  @NotNull final Color defaultValue,\n                                  final boolean selected,\n                                  final boolean disabled) {\n      if (selected) {\n        return getColor(shortPropertyName + \".Selected\", defaultValue);\n      } else if (disabled) {\n        return getColor(shortPropertyName + \".Disabled\", defaultValue);\n      }\n      return getColor(shortPropertyName + \".Default\", defaultValue);\n    }\n\n    public static Color getInactiveFillColor() {\n      return getColor(\"Background\", new JBColor(Gray._240.withAlpha(180), Gray._110.withAlpha(180)), false, true);\n    }\n\n    public static Color getBorderColor(final boolean enabled, final boolean selected) {\n      return enabled ? getColor(\"Border\", Gray._120.withAlpha(0x5a), selected, false)\n                     : getColor(\"Border\", Gray._120.withAlpha(90), selected, true);\n    }\n\n    public static Color getBackgroundColor(final boolean selected) {\n      return getColor(\"Background\", new JBColor(Gray._240, Gray._110), selected, false);\n    }\n\n    public static Color getCheckSignColor(final boolean enabled) {\n      return enabled ?\n             JBColor.namedColor(\"CheckBox.checkSignColor\", Gray._240) :\n             JBColor.namedColor(\"CheckBox.checkSignColorDisabled\", Gray._120);\n    }\n\n    public static Color getShadowColor(final boolean enabled) {\n      return enabled ?\n             JBColor.namedColor(\"CheckBox.shadowColor\", new JBColor(Gray._240, Gray._170)) :\n             JBColor.namedColor(\"CheckBox.shadowColorDisabled\", Gray._120);\n    }\n\n    public static Color getFocusedBackgroundColor(final boolean armed, final boolean selected) {\n      return armed ? getColor(\"Focus.Wide\", new JBColor(Gray._240, Gray._170), selected, false)\n                   : getColor(\"Focus.Thin\", new JBColor(Gray._240, Gray._170), selected, false);\n    }\n  }\n\n  @SuppressWarnings({\"unused\",\n    \"MagicNumber\",\n    \"StaticMethodOnlyUsedInOneClass\"})\n  public enum Label {\n    JOHNNY_WALKER;\n\n    private static final String LABEL_DISABLED_FOREGROUND = \"Label.disabledForeground\";\n    @NonNls\n    private static final String LABEL_INFO_FOREGROUND = \"Label.infoForeground\";\n    private static final String LABEL_SELECTED_FOREGROUND = \"Label.selectedForeground\";\n    private static final String LABEL_FOREGROUND = \"Label.foreground\";\n\n    public static Color getLabelInfoForeground() {\n      return JBColor.namedColor(LABEL_INFO_FOREGROUND, new JBColor(0x777777, 0x787878));\n    }\n\n    public static Color getLabelDisabledForeground() {\n      return JBColor.namedColor(LABEL_DISABLED_FOREGROUND, new JBColor(0x777777, 0x787878));\n    }\n\n    public static Color getLabelInfoForeground(final JLabel label) {\n      Color foreground = label.getForeground();\n      if (foreground == Gray.x78 || foreground == Gray.x80) {\n        foreground = JBColor.namedColor(LABEL_INFO_FOREGROUND, new JBColor(0x777777, 0x787878));\n      }\n      return foreground;\n    }\n\n    public static void paintText(final JLabel label, final Graphics g, final String s, final int textX, final int textY) {\n      final int mnemIndex = DarculaLaf.isAltPressed() ? label.getDisplayedMnemonicIndex() : -1;\n      SwingUtilities2.drawStringUnderlineCharAt(label, g, s, mnemIndex, textX, textY);\n    }\n\n    public static Color getSelectedForeground() {\n      return JBColor.namedColor(LABEL_SELECTED_FOREGROUND, new JBColor(0x11111, 0xFFFFFF));\n    }\n\n    public static Color getLabelForeground() {\n      return JBColor.namedColor(LABEL_FOREGROUND, UIUtil.getLabelForeground());\n    }\n  }\n\n  @SuppressWarnings({\"unused\",\n    \"StaticMethodOnlyUsedInOneClass\",\n    \"MagicNumber\"})\n  public enum Panel {\n    DE_PON;\n\n    public static final String PANEL_BACKGROUND = \"Panel.background\";\n    @NonNls\n    public static final String PANEL_FOREGROUND = \"Panel.foreground\";\n    @NonNls\n    public static final String CONTRAST_BACKGROUND = \"EditorPane.background\";\n    @NonNls\n    public static final String SELECTION_BACKGROUND = \"List.selectionBackground\";\n    @NonNls\n    public static final String SELECTION_FOREGROUND = \"List.selectionForeground\";\n    @NonNls\n    public static final String SECONDARY_BACKGROUND = \"List.background\";\n    @NonNls\n    public static final String HIGHLIGHT_BACKGROUND = \"Component.focusedBorderColor\";\n    @NonNls\n    public static final String EXCLUDED_BACKGROUND = \"FileColor.excluded\";\n    @NonNls\n    public static final String PRIMARY_FOREGROUND = \"Label.infoForeground\";\n    @NonNls\n    public static final String LINK_FOREGROUND = \"link.foreground\";\n    public static final Font FONT = UIManager.getFont(\"Panel.Font\");\n    @NonNls\n    private static final String COUNTER_BACKGROUND = \"Counter.background\";\n\n    public static Color getBackground() {\n      return JBColor.namedColor(PANEL_BACKGROUND, UIUtil.getPanelBackground());\n    }\n\n    public static Color getForeground() {\n      return JBColor.namedColor(PANEL_FOREGROUND, UIUtil.getLabelForeground());\n    }\n\n    public static Color getContrastBackground() {\n      final Color color = JBColor.namedColor(PANEL_BACKGROUND, UIUtil.getEditorPaneBackground());\n      final boolean isDark = ColorUtil.isDark(color);\n      return MTColorUtils.contrastifyBackground(isDark, new ColorUIResource(color), false);\n    }\n\n    public static Color getSecondaryBackground() {\n      return JBColor.namedColor(SECONDARY_BACKGROUND, UIUtil.getListBackground());\n    }\n\n    public static Color getHighlightBackground() {\n      return JBColor.namedColor(HIGHLIGHT_BACKGROUND, DarculaUIUtil.getOutlineColor(true, true));\n    }\n\n    public static Color getTransparentBackground() {\n      return ColorUtil.withAlpha(JBColor.namedColor(PANEL_BACKGROUND, UIUtil.getPanelBackground()), 0.3);\n    }\n\n    public static Color getExcludedBackground() {\n      final Color color = JBColor.namedColor(PANEL_BACKGROUND, UIUtil.getPanelBackground());\n      final boolean isLight = !ColorUtil.isDark(color);\n      return MTColorUtils.contrastifyBackground(isLight, new ColorUIResource(color), false);\n    }\n\n    public static Color getPrimaryForeground() {\n      return JBColor.namedColor(PRIMARY_FOREGROUND, UIUtil.getLabelForeground());\n    }\n\n    public static Color getSelectionBackground() {\n      return JBColor.namedColor(SELECTION_BACKGROUND, UIUtil.getListSelectionBackground(true));\n    }\n\n    public static Color getSelectionForeground() {\n      return JBColor.namedColor(SELECTION_FOREGROUND, UIUtil.getListSelectionForeground(true));\n    }\n\n    public static Color getLinkForeground() {\n      return JBColor.namedColor(LINK_FOREGROUND, JBColor.blue);\n    }\n\n    public static Font getFont() {\n      return FONT;\n    }\n\n    public static Color getAccentColor() {\n      return JBColor.namedColor(COUNTER_BACKGROUND, UIUtil.getOptionPaneBackground());\n    }\n  }\n\n  @SuppressWarnings(\"unused\")\n  public enum Notification {\n    WIZZ;\n\n    @NonNls\n    private static final String NOTIFICATION_BACKGROUND = \"Notification.background\";\n\n    @SuppressWarnings(\"MagicNumber\")\n    public static Color getBackgroundColor() {\n      return JBColor.namedColor(NOTIFICATION_BACKGROUND, new JBColor(Gray._242, new Color(0x4e5052)));\n    }\n  }\n\n  @SuppressWarnings(\"unused\")\n  public enum Tabs {\n    BATS;\n\n    @NonNls\n    public static final String TAB_UNDERLINE = \"TAB_UNDERLINE\";\n    @NonNls\n    public static final String TAB_UNDERLINE_INACTIVE = \"TAB_UNDERLINE_INACTIVE\";\n    @NonNls\n    private static final String UNDERLINE_COLOR = \"EditorTabs.underlineColor\";\n    @NonNls\n    private static final String EDITOR_TABS_INACTIVE = \"EditorTabs.inactiveColoredFileBackground\";\n\n    @SuppressWarnings(\"MagicNumber\")\n    public static Color getUnderlineColor() {\n      return JBColor.namedColor(UNDERLINE_COLOR, new Color(0x439EB8));\n    }\n\n    public static Color getSelectionInactiveBackground() {\n      return JBUI.CurrentTheme.EditorTabs.inactiveColoredFileBackground();\n    }\n  }\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/mallowigi/idea/utils/MTUI.java b/src/main/java/com/mallowigi/idea/utils/MTUI.java
--- a/src/main/java/com/mallowigi/idea/utils/MTUI.java	(revision ab6db325159d89e283a5dd4e1433736c27126c06)
+++ b/src/main/java/com/mallowigi/idea/utils/MTUI.java	(date 1620398269988)
@@ -65,7 +65,7 @@
 
     public static Color getSelectionInactiveBackground() {
       final Color color = JBColor.namedColor(TREE_SELECTION_BACKGROUND, new JBColor(0x27384C, 0x0D293E));
-      return ColorUtil.withAlpha(color, 0.25);
+      return ColorUtil.withAlpha(color, 0.95);
     }
   }
 
Index: src/main/java/com/mallowigi/idea/themes/themes/MTAbstractTheme.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*\n * The MIT License (MIT)\n *\n * Copyright (c) 2015-2021 Elior \"Mallowigi\" Boukhobza\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n *\n *\n */\n\npackage com.mallowigi.idea.themes.themes;\n\nimport com.google.common.collect.Sets;\nimport com.intellij.ide.util.PropertiesComponent;\nimport com.intellij.openapi.application.ApplicationManager;\nimport com.intellij.openapi.util.IconLoader;\nimport com.intellij.openapi.util.io.FileUtil;\nimport com.intellij.openapi.util.text.StringUtil;\nimport com.intellij.openapi.wm.impl.IdeBackgroundUtil;\nimport com.intellij.ui.ColorUtil;\nimport com.intellij.ui.JBColor;\nimport com.intellij.util.IconUtil;\nimport com.mallowigi.idea.MTConfig;\nimport com.mallowigi.idea.MTThemeManager;\nimport com.mallowigi.idea.lafs.MTDarkLaf;\nimport com.mallowigi.idea.lafs.MTLightLaf;\nimport com.mallowigi.idea.themes.MTAccentMode;\nimport com.mallowigi.idea.themes.lists.ContrastResources;\nimport com.mallowigi.idea.themes.lists.MTThemeResources;\nimport com.mallowigi.idea.themes.models.MTSerializedTheme;\nimport com.mallowigi.idea.themes.models.MTThemeable;\nimport com.mallowigi.idea.utils.MTColorUtils;\nimport com.mallowigi.idea.utils.MTUI;\nimport com.mallowigi.idea.utils.MTUiUtils;\nimport org.jetbrains.annotations.NonNls;\nimport org.jetbrains.annotations.NotNull;\n\nimport javax.swing.*;\nimport javax.swing.plaf.ColorUIResource;\nimport java.awt.*;\nimport java.io.*;\nimport java.net.URL;\nimport java.util.Collections;\nimport java.util.Objects;\nimport java.util.Set;\n\nimport static com.mallowigi.idea.themes.MTAccentMode.getSelectionColor;\n\n@SuppressWarnings({\"DuplicateStringLiteralInspection\",\n  \"HardCodedStringLiteral\",\n  \"SerializableHasSerializationMethods\",\n  \"NegativelyNamedBooleanVariable\",\n  \"DesignForExtension\"})\npublic abstract class MTAbstractTheme implements Serializable, MTThemeable, MTSerializedTheme {\n\n  private String id = null;\n  private String editorColorsScheme = null;\n  private boolean dark = false;\n  private String name = null;\n  private String icon = null;\n  private transient boolean isNotHighContrast = false;\n\n  @SuppressWarnings({\"OverridableMethodCallDuringObjectConstruction\",\n    \"OverriddenMethodCallDuringObjectConstruction\"})\n  protected MTAbstractTheme() {\n    init();\n  }\n\n  /**\n   * Theme Builder\n   */\n  @SuppressWarnings(\"DesignForExtension\")\n  protected void init() {\n    setId(getThemeId())\n      .setIsDark(isThemeDark())\n      .setEditorColorScheme(getThemeColorScheme())\n      .setIcon(getThemeIcon())\n      .setName(getThemeName());\n  }\n\n  /**\n   * Get the theme id\n   */\n  @Override\n  public final String toString() {\n    return getId();\n  }\n\n  /**\n   * Activate the theme by overriding UIManager with the theme resources and by setting the relevant Look and feel\n   */\n  @SuppressWarnings(\"FeatureEnvy\")\n  @Override\n  public final void activate() {\n    final MTConfig config = MTConfig.getInstance();\n    isNotHighContrast = !config.isHighContrast();\n    try {\n      JBColor.setDark(dark);\n      IconLoader.setUseDarkIcons(dark);\n      // Overridable method\n      buildAllResources();\n\n      // Apply theme accent color if said so\n      if (config.isOverrideAccentColor()) {\n        config.setAccentColor(ColorUtil.toHex(getAccentColorResource()));\n        MTThemeManager.applyAccents(true);\n      }\n\n      installBackgroundImage();\n\n      // Set MT Look and Feel\n      setLookAndFeel();\n    } catch (final UnsupportedLookAndFeelException e) {\n      e.printStackTrace();\n    }\n  }\n\n  @SuppressWarnings(\"DesignForExtension\")\n  protected void setLookAndFeel() throws UnsupportedLookAndFeelException {\n    if (dark) {\n      UIManager.setLookAndFeel(new MTDarkLaf(this));\n    } else {\n      UIManager.setLookAndFeel(new MTLightLaf(this));\n    }\n  }\n\n  /**\n   * Build all resources. Overridable\n   */\n  @SuppressWarnings({\"CheckStyle\",\n    \"FeatureEnvy\",\n    \"DesignForExtension\",\n    \"MagicNumber\"})\n  protected void buildAllResources() {\n    MTUiUtils.buildResources(MTThemeResources.getBackgroundResources(), MTColorUtils.contrastifyBackground(dark,\n      getBackgroundColorResource(), isNotHighContrast));\n    MTUiUtils.buildResources(MTThemeResources.getForegroundResources(), getForegroundColorResource());\n    MTUiUtils.buildResources(MTThemeResources.getTextResources(), MTColorUtils.contrastifyForeground(dark, getTextColorResource(),\n      isNotHighContrast));\n    MTUiUtils.buildResources(MTThemeResources.getSelectionBackgroundResources(), getSelectionBackgroundColorResource());\n    MTUiUtils.buildResources(MTThemeResources.getSelectionTransparentBackgroundResources(),\n      ColorUtil.toAlpha(getSelectionBackgroundColorResource(), 80));\n    MTUiUtils.buildResources(MTThemeResources.getSelectionForegroundResources(), getSelectionForegroundColorResource());\n    MTUiUtils.buildResources(MTThemeResources.getButtonColorResources(), getButtonColorResource());\n    MTUiUtils.buildResources(MTThemeResources.getSecondaryBackgroundResources(), getSecondaryBackgroundColorResource());\n    MTUiUtils.buildResources(MTThemeResources.getDisabledResources(), getDisabledColorResource());\n    MTUiUtils.buildResources(MTThemeResources.getContrastResources(), MTColorUtils.contrastifyBackground(dark, getContrastColorResource()\n      , isNotHighContrast));\n    MTUiUtils.buildResources(MTThemeResources.getTableSelectedResources(), getTableSelectedColorResource());\n    MTUiUtils.buildResources(MTThemeResources.getSecondBorderResources(), getSecondBorderColorResource());\n    MTUiUtils.buildResources(MTThemeResources.getHighlightResources(), getHighlightColorResource());\n\n    MTUiUtils.buildResources(MTThemeResources.getTreeSelectionResources(), getTreeSelectionColorResource());\n    MTUiUtils.buildResources(MTThemeResources.getNotificationsResources(), getNotificationsColorResource());\n    MTUiUtils.buildResources(MTThemeResources.getExcludedResources(), getExcludedColorResource());\n\n    buildNotificationsColors();\n    buildFlameChartColors();\n    buildFileColors();\n    buildTransparentColors();\n    buildTreeSelectionInactiveColors();\n    buildTabsTransparentColors();\n    buildOutlineButtons();\n\n    UIManager.getDefaults().put(\"Component.grayForeground\", ColorUtil.darker(getTextColorResource(), 2));\n    UIManager.getDefaults().put(\"EditorGroupsTabs.underlineHeight\", MTConfig.getInstance().getHighlightThickness());\n  }\n\n  //region Getters/Setters\n\n  /**\n   * The theme name\n   */\n  @NotNull\n  @Override\n  public final String getName() {\n    return name;\n  }\n\n  /**\n   * Set the theme name\n   */\n  @Override\n  public final MTAbstractTheme setName(final String name) {\n    this.name = name;\n    return this;\n  }\n\n  /**\n   * Get the editor color scheme\n   */\n  @Override\n  public final String getEditorColorsScheme() {\n    return editorColorsScheme;\n  }\n\n  @Override\n  public final MTAbstractTheme setEditorColorScheme(final String editorColorsScheme) {\n    this.editorColorsScheme = editorColorsScheme;\n    return this;\n  }\n\n  /**\n   * The theme id\n   */\n  @SuppressWarnings(\"DesignForExtension\")\n  @Override\n  @NotNull\n  public String getId() {\n    return id;\n  }\n\n  @Override\n  public final MTAbstractTheme setId(final String id) {\n    this.id = id;\n    return this;\n  }\n\n  /**\n   * Whether the theme is a dark one\n   */\n  @Override\n  public final boolean isDark() {\n    return dark;\n  }\n\n  @Override\n  public final MTAbstractTheme setIsDark(final boolean dark) {\n    this.dark = dark;\n    return this;\n  }\n\n  @NotNull\n  @Override\n  public final Icon getIcon() {\n    return icon != null ? IconLoader.getIcon(icon) : IconUtil.getEmptyIcon(true);\n  }\n\n  @Override\n  public final MTAbstractTheme setIcon(final String icon) {\n    this.icon = icon;\n    return this;\n  }\n\n  /**\n   * Whether the theme is a custom or external one\n   */\n  @SuppressWarnings(\"DesignForExtension\")\n  @Override\n  public boolean isCustom() {\n    return false;\n  }\n  //endregion\n\n  //region Theme methods\n\n  /**\n   * Get background color custom property\n   */\n  @Override\n  @NotNull\n  public final Color getBackgroundColor() {\n    return MTColorUtils.contrastifyBackground(dark, getBackgroundColorResource(), isNotHighContrast);\n  }\n\n  /**\n   * Get contrast color custom property\n   */\n  @Override\n  @NotNull\n  public final Color getContrastColor() {\n    return MTColorUtils.contrastifyBackground(dark, getContrastColorResource(), isNotHighContrast);\n  }\n\n  /**\n   * Get foreground color custom property\n   */\n  @Override\n  @NotNull\n  public final Color getForegroundColor() {\n    return MTColorUtils.contrastifyForeground(dark, getForegroundColorResource(), isNotHighContrast);\n  }\n\n  /**\n   * Get background color custom property\n   */\n  @Override\n  @NotNull\n  public final Color getPrimaryColor() {\n    return MTColorUtils.contrastifyForeground(dark, getTextColorResource(), isNotHighContrast);\n  }\n\n  @NotNull\n  @Override\n  public final Color getSelectionBackgroundColor() {\n    return getSelectionBackgroundColorResource();\n  }\n\n  @NotNull\n  @Override\n  public final Color getSelectionForegroundColor() {\n    return getSelectionForegroundColorResource();\n  }\n\n  @NotNull\n  @Override\n  public final Color getExcludedColor() {\n    return MTColorUtils.contrastifyBackground(dark, getExcludedColorResource(), isNotHighContrast);\n  }\n\n  @NotNull\n  @Override\n  public final Color getNotificationsColor() {\n    return getNotificationsColorResource();\n  }\n\n  @NotNull\n  @Override\n  public final Color getSecondBorderColor() {\n    return getSecondBorderColorResource();\n  }\n\n  @NotNull\n  @Override\n  public final Color getDisabledColor() {\n    return getDisabledColorResource();\n  }\n\n  @NotNull\n  @Override\n  public final Color getSecondaryBackgroundColor() {\n    return getSecondaryBackgroundColorResource();\n  }\n\n  @NotNull\n  @Override\n  public final Color getButtonColor() {\n    return getButtonColorResource();\n  }\n\n  @NotNull\n  @Override\n  public final Color getTableSelectedColor() {\n    return getTableSelectedColorResource();\n  }\n\n  @NotNull\n  @Override\n  public final Color getTextColor() {\n    return getTextColorResource();\n  }\n\n  @NotNull\n  @Override\n  public final Color getTreeSelectionColor() {\n    return getTreeSelectionColorResource();\n  }\n\n  @NotNull\n  @Override\n  public final Color getHighlightColor() {\n    return getHighlightColorResource();\n  }\n\n  @NotNull\n  @Override\n  public final Color getAccentColor() {\n    return getAccentColorResource();\n  }\n\n  @Override\n  public final void setPristine() {\n    isNotHighContrast = true;\n  }\n\n  //endregion\n\n  //region Other resources\n\n  /**\n   * Special treatment for notification colors\n   */\n  private static void buildNotificationsColors() {\n    final JBColor errorColor = new JBColor(new ColorUIResource(0xef5350), new ColorUIResource(0xb71c1c));\n    UIManager.put(\"Notification.ToolWindowError.background\", errorColor);\n    UIManager.put(\"Notification.ToolWindow.errorBackground\", errorColor);\n    UIManager.put(\"Notification.ToolWindowError.borderColor\", errorColor);\n    UIManager.put(\"Notification.ToolWindow.errorBorderColor\", errorColor);\n\n    final JBColor warnColor = new JBColor(new ColorUIResource(0xFFD54F), new ColorUIResource(0x5D4037));\n    UIManager.put(\"Notification.ToolWindowWarning.background\", warnColor);\n    UIManager.put(\"Notification.ToolWindow.warningBackground\", warnColor);\n    UIManager.put(\"Notification.ToolWindowWarning.borderColor\", warnColor);\n    UIManager.put(\"Notification.ToolWindow.warningBorderColor\", warnColor);\n\n    final JBColor infoColor = new JBColor(new ColorUIResource(0x66BB6A), new ColorUIResource(0x1B5E20));\n    UIManager.put(\"Notification.ToolWindowInfo.borderColor\", infoColor); // deprecated\n    UIManager.put(\"Notification.ToolWindow.infoBorderColor\", infoColor); // deprecated\n    UIManager.put(\"Notification.ToolWindow.informativeBorderColor\", infoColor);\n\n    UIManager.put(\"Notification.ToolWindowInfo.background\", infoColor); // deprecated\n    UIManager.put(\"Notification.ToolWindow.infoBackground\", infoColor); // deprecated\n    UIManager.put(\"Notification.ToolWindow.informativeBackground\", infoColor); // deprecated\n  }\n\n  /**\n   * Special treatment for flame chart colors\n   */\n  private static void buildFlameChartColors() {\n    UIManager.put(\"FlameGraph.JVMBackground\", MTUI.MTColor.CYAN);\n    UIManager.put(\"FlameGraph.JVMFocusBackground\", MTUI.MTColor.BLUE);\n    UIManager.put(\"FlameGraph.JVMSearchNotMatchedBackground\", MTUI.MTColor.RED);\n    UIManager.put(\"FlameGraph.JVMFocusSearchNotMatchedBackground\", MTUI.MTColor.BROWN);\n\n    UIManager.put(\"FlameGraph.nativeBackground\", MTUI.MTColor.YELLOW);\n    UIManager.put(\"FlameGraph.nativeFocusBackground\", MTUI.MTColor.ORANGE);\n    UIManager.put(\"FlameGraph.nativeSearchNotMatchedBackground\", MTUI.MTColor.PURPLE);\n    UIManager.put(\"FlameGraph.nativeFocusSearchNotMatchedBackground\", MTUI.MTColor.PINK);\n  }\n\n  /**\n   * Special treatment for file colors\n   */\n  private static void buildFileColors() {\n    UIManager.put(\"FileColor.Green\", new JBColor(MTUI.MTColor.GREEN, MTUI.MTColor.DARK_GREEN));\n    UIManager.put(\"FileColor.Blue\", new JBColor(MTUI.MTColor.BLUE, MTUI.MTColor.DARK_BLUE));\n    UIManager.put(\"FileColor.Yellow\", new JBColor(MTUI.MTColor.YELLOW, MTUI.MTColor.DARK_YELLOW));\n    UIManager.put(\"FileColor.Orange\", new JBColor(MTUI.MTColor.ORANGE, MTUI.MTColor.DARK_ORANGE));\n    UIManager.put(\"FileColor.Violet\", new JBColor(MTUI.MTColor.PURPLE, MTUI.MTColor.DARK_PURPLE));\n    UIManager.put(\"FileColor.Rose\", new JBColor(MTUI.MTColor.RED, MTUI.MTColor.DARK_RED));\n  }\n\n  /**\n   * Build transparent colors\n   */\n  private static void buildTransparentColors() {\n    final Set<String> colors = Collections.unmodifiableSet(\n      Sets.newHashSet(\n        \"ScrollBar.hoverTrackColor\",\n        \"ScrollBar.trackColor\",\n        \"ScrollBar.Mac.hoverTrackColor\",\n        \"ScrollBar.Mac.trackColor\",\n        \"ScrollBar.Transparent.hoverTrackColor\",\n        \"ScrollBar.Transparent.trackColor\",\n        \"ScrollBar.Mac.Transparent.hoverTrackColor\",\n        \"ScrollBar.Mac.Transparent.trackColor\"\n      ));\n\n    final Color transparentBackground = MTUI.Panel.getTransparentBackground();\n    MTUiUtils.buildResources(colors, transparentBackground);\n  }\n\n  /**\n   * Build Tree Selection Inactive Colors\n   */\n  private static void buildTreeSelectionInactiveColors() {\n    final Set<String> colors = Collections.unmodifiableSet(\n      Sets.newHashSet(\n        \"CompletionPopup.nonFocusedState\"\n      ));\n\n    final Color transparentBackground = MTUI.Tree.getSelectionInactiveBackground();\n    MTUiUtils.buildResources(colors, transparentBackground);\n  }\n\n  /**\n   * Build Tabs Selection Inactive Colors\n   */\n  private void buildTabsTransparentColors() {\n    final Set<String> colors = Collections.unmodifiableSet(\n      Sets.newHashSet(\n        \"EditorTabs.inactiveColoredFileBackground\"\n      ));\n\n    final Color transparentBackground = ColorUtil.withAlpha(getSecondaryBackgroundColorResource(), 0.5);\n    MTUiUtils.buildResources(colors, transparentBackground);\n  }\n\n  private void buildOutlineButtons() {\n    final Set<String> colors = Collections.unmodifiableSet(\n      Sets.newHashSet(\n        \"Button.background\",\n        \"Button.endBackground\",\n        \"Button.startBackground\"\n      ));\n\n    final Color buttonColor = getButtonColor();\n    final Color transparentBackground = MTConfig.getInstance().isBorderedButtons() ? MTUI.Panel.getBackground() : buttonColor;\n    MTUiUtils.buildResources(colors, transparentBackground);\n  }\n\n  @Override\n  public void applyContrast(final boolean apply) {\n    final Color contrastedColor = apply ? getContrastColor() : getBackgroundColor();\n    for (final String resource : ContrastResources.CONTRASTED_RESOURCES) {\n      UIManager.put(resource, contrastedColor);\n    }\n  }\n\n  @Override\n  public final void setThemeName(final String name) {\n    setName(name);\n  }\n\n  @Override\n  public boolean isNative() {\n    return false;\n  }\n\n  @SuppressWarnings({\"MagicCharacter\",\n    \"OverlyBroadCatchBlock\",\n    \"NestedTryStatement\"})\n  private void installBackgroundImage() {\n    final String currentSpec = PropertiesComponent.getInstance().getValue(IdeBackgroundUtil.FRAME_PROP);\n    final String oldCurrentSpec = PropertiesComponent.getInstance().getValue(\"old.mt.\" + IdeBackgroundUtil.FRAME_PROP);\n\n    if (!MTConfig.getInstance().isUseMaterialWallpapers()) {\n      removeBackgroundImage(null);\n      return;\n    }\n\n    try {\n      final String path = getBackgroundImage();\n      if (path != null) {\n        final File tmpImage = FileUtil.createTempFile(\"mtBackgroundImage\", path.toString().substring(path.lastIndexOf('.')), true);\n        final URL resource = getClass().getClassLoader().getResource(path);\n\n        if (resource != null) {\n          try (final InputStream input = getClass().getClassLoader().getResourceAsStream(path)) {\n            try (final FileOutputStream output = new FileOutputStream(tmpImage)) {\n              FileUtil.copy(Objects.requireNonNull(input), output);\n            }\n          }\n\n          final String image = tmpImage.getPath();\n          final String alpha = String.valueOf(85);\n          final String fill = MTUiUtils.parseEnumValue(\"fill\", IdeBackgroundUtil.Fill.PLAIN);\n          final String anchor = MTUiUtils.parseEnumValue(\"center\", IdeBackgroundUtil.Anchor.CENTER);\n\n          final String spec = StringUtil.join(new String[]{image,\n            alpha,\n            fill,\n            anchor}, \",\");\n          PropertiesComponent.getInstance().setValue(\"old.mt.\" + IdeBackgroundUtil.FRAME_PROP, currentSpec);\n          PropertiesComponent.getInstance().setValue(IdeBackgroundUtil.FRAME_PROP, spec);\n          ApplicationManager.getApplication().invokeLater(IdeBackgroundUtil::repaintAllWindows);\n        } else {\n          throw new IllegalArgumentException(\"Can't load background: \" + path);\n        }\n      } else {\n        removeBackgroundImage(oldCurrentSpec);\n      }\n    } catch (final IOException ignored) {\n    }\n  }\n\n  private static void removeBackgroundImage(final String oldCurrentSpec) {\n    PropertiesComponent.getInstance().setValue(IdeBackgroundUtil.FRAME_PROP, oldCurrentSpec);\n    PropertiesComponent.getInstance().setValue(\"old.mt.\" + IdeBackgroundUtil.FRAME_PROP, null);\n    ApplicationManager.getApplication().invokeLater(IdeBackgroundUtil::repaintAllWindows);\n  }\n\n  @NonNls\n  protected abstract String getBackgroundImage();\n  //endregion\n\n  @SuppressWarnings(\"FeatureEnvy\")\n  @Override\n  public void applyAccentMode() {\n    final MTConfig mtConfig = MTConfig.getInstance();\n    final Color accentColor = ColorUtil.fromHex(mtConfig.getAccentColor());\n    final Color darkerAccentColor = ColorUtil.darker(accentColor, 2);\n    final Color accentColorTransparent = ColorUtil.withAlpha(accentColor, 0.5);\n    final Color secondAccentColor = ColorUtil.fromHex(mtConfig.getSecondAccentColor());\n    final boolean accentMode = mtConfig.isAccentMode();\n\n    if (accentMode) {\n      // Add accent resources\n      MTUiUtils.buildResources(MTAccentMode.ACCENT_EXTRA_RESOURCES, accentColor);\n      MTUiUtils.buildResources(MTAccentMode.DARKER_ACCENT_RESOURCES, darkerAccentColor);\n      MTUiUtils.buildResources(MTAccentMode.ACCENT_TRANSPARENT_EXTRA_RESOURCES, accentColorTransparent);\n      // Add new selection color resources\n      MTUiUtils.buildResources(MTAccentMode.SELECTION_RESOURCES, getSelectionColor());\n      MTUiUtils.buildResources(MTAccentMode.SECOND_ACCENT_RESOURCES, secondAccentColor);\n    }\n  }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/mallowigi/idea/themes/themes/MTAbstractTheme.java b/src/main/java/com/mallowigi/idea/themes/themes/MTAbstractTheme.java
--- a/src/main/java/com/mallowigi/idea/themes/themes/MTAbstractTheme.java	(revision ab6db325159d89e283a5dd4e1433736c27126c06)
+++ b/src/main/java/com/mallowigi/idea/themes/themes/MTAbstractTheme.java	(date 1620397798177)
@@ -472,7 +472,7 @@
   private static void buildTreeSelectionInactiveColors() {
     final Set<String> colors = Collections.unmodifiableSet(
       Sets.newHashSet(
-        "CompletionPopup.nonFocusedState"
+        "CompletionPopup.selectionBackground"
       ));
 
     final Color transparentBackground = MTUI.Tree.getSelectionInactiveBackground();
Index: src/main/java/com/mallowigi/idea/lafs/MTLafInstaller.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*\n * The MIT License (MIT)\n *\n * Copyright (c) 2015-2021 Elior \"Mallowigi\" Boukhobza\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n *\n *\n */\n\npackage com.mallowigi.idea.lafs;\n\nimport com.intellij.ide.ui.laf.darcula.ui.DarculaMenuBarBorder;\nimport com.intellij.ide.ui.laf.darcula.ui.DarculaMenuItemBorder;\nimport com.intellij.openapi.application.ApplicationManager;\nimport com.intellij.openapi.util.registry.Registry;\nimport com.intellij.ui.components.JBScrollBar;\nimport com.intellij.ui.tree.ui.Control;\nimport com.intellij.util.ui.JBUI;\nimport com.mallowigi.idea.MTConfig;\nimport com.mallowigi.idea.themes.models.MTThemeable;\nimport com.mallowigi.idea.ui.*;\nimport com.mallowigi.idea.ui.indicators.MTSelectedTreePainter;\nimport com.mallowigi.idea.utils.MTUI;\nimport org.jetbrains.annotations.NonNls;\nimport org.jetbrains.annotations.Nullable;\n\nimport javax.swing.*;\nimport javax.swing.plaf.ColorUIResource;\nimport java.awt.*;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Objects;\n\n/**\n * Service to install Material Theme properties in the UIManager\n *\n * @author helio\n * Created on 2018-10-29\n */\n@SuppressWarnings({\"ClassWithTooManyMethods\",\n  \"OverlyLongMethod\",\n  \"DuplicateStringLiteralInspection\",\n  \"OverlyCoupledClass\",\n  \"MagicNumber\"})\npublic class MTLafInstaller {\n  /**\n   * The Theme\n   */\n  @Nullable\n  private final MTThemeable theme;\n\n  /**\n   * Constructor MTLafInstaller creates a new MTLafInstaller instance.\n   *\n   * @param theme of type MTThemeable\n   */\n  MTLafInstaller(@Nullable final MTThemeable theme) {\n    this.theme = theme;\n  }\n\n  /**\n   * Install Material Theme UI Components.\n   * <p>\n   * Some components will only be installed if the Material Components option is set, while others depend on other options, such as\n   * Compact Statusbars, Arrow Styles, Title bar and so on.\n   *\n   * @param defaults the UIManager defaults to install properties into\n   */\n  static void installMTDefaults(final UIDefaults defaults) {\n    replaceStatusBar(defaults);\n    replaceTree(defaults);\n    replaceSelectedIndicator(defaults);\n    replaceDropdowns(defaults);\n    replaceTableHeaders(defaults);\n    replaceRootPane(defaults);\n    replaceMenus(defaults);\n    replaceTabbedPanes(defaults);\n    replaceLabels(defaults);\n    replaceDefaultButtons(defaults);\n\n    replaceButtons(defaults);\n    replaceTextFields(defaults);\n    replaceProgressBar(defaults);\n    replaceTables(defaults);\n    replaceSpinners(defaults);\n    replaceCheckboxes(defaults);\n    replaceRadioButtons(defaults);\n    replaceSliders(defaults);\n    replaceTextAreas(defaults);\n    modifyRegistry();\n  }\n\n  /**\n   * Install non themeable defaults, such as borders, insets and so on\n   *\n   * @param defaults of type UIDefaults\n   */\n  @SuppressWarnings(\"DuplicateStringLiteralInspection\")\n  public static void installDefaults(@NonNls final UIDefaults defaults) {\n    defaults.put(\"Caret.width\", 2);\n    defaults.put(\"Border.width\", 2); // deprecated\n    defaults.put(\"Component.focusWidth\", 2);\n    defaults.put(\"CompletionPopup.nonFocusedState\", false);\n    defaults.put(\"CellEditor.border.width\", 2);\n    defaults.put(\"Window.border\", \"1,1,1,1,000000\");\n    defaults.put(\"Tree.border\", \"1,1,1,1\");\n    defaults.put(\"ActionsList.mnemonicsBorderInsets\", \"0,8,1,6\");\n    defaults.put(\"ActionsList.cellBorderInsets\", \"1,12,1,12\");\n    defaults.put(\"ActionsList.icon.gap\", 8);\n    defaults.put(\"ActionsList.mnemonic.icon.gap\", 6);\n    defaults.put(\"ActionsList.mnemonics.insets\", \"0,8,0,8\");\n    defaults.put(\"ListUI\", \"com.intellij.ui.components.WideSelectionListUI\");\n\n    defaults.put(\"Button.arc\", 6);\n    defaults.put(\"Component.arc\", 0);\n\n    defaults.put(\"Menu.maxGutterIconWidth\", 18);\n    defaults.put(\"MenuItem.maxGutterIconWidth\", 18);\n    defaults.put(\"MenuItem.acceleratorDelimiter\", \"-\");\n    defaults.put(\"MenuItem.border\", new DarculaMenuItemBorder());\n    defaults.put(\"Menu.border\", new DarculaMenuItemBorder());\n    defaults.put(\"MenuBar.border\", new DarculaMenuBarBorder());\n\n    defaults.put(\"TextArea.caretBlinkRate\", 500);\n    defaults.put(\"Tree.paintLines\", false);\n    defaults.put(\"Table.cellNoFocusBorder\", JBUI.insets(4, 4, 4, 4));\n    defaults.put(\"CheckBoxMenuItem.borderPainted\", false);\n    defaults.put(\"RadioButtonMenuItem.borderPainted\", false);\n    defaults.put(\"ComboBox.squareButton\", true);\n    defaults.put(\"ComboBox.padding\", JBUI.insets(1, 5, 1, 5));\n    defaults.put(\"CheckBox.border.width\", 3);\n    defaults.put(\"RadioButton.border.width\", 3);\n    defaults.put(\"List.rowHeight\", 20);\n    defaults.put(\"Table.rowHeight\", 20);\n\n    defaults.put(\"HelpTooltip.verticalGap\", 4);\n    defaults.put(\"HelpTooltip.horizontalGap\", 10);\n    defaults.put(\"HelpTooltip.maxWidth\", 250);\n    defaults.put(\"HelpTooltip.xOffset\", 1);\n    defaults.put(\"HelpTooltip.yOffset\", 1);\n\n    defaults.put(\"HelpTooltip.defaultTextBorderInsets\", JBUI.insets(10, 10, 10, 16));\n    defaults.put(\"HelpTooltip.fontSizeDelta\", 0);\n    defaults.put(\"HelpTooltip.smallTextBorderInsets\", JBUI.insets(4, 8, 5, 8));\n    defaults.put(\"ValidationTooltip.maxWidth\", 384);\n\n    defaults.put(\"Spinner.arrowButtonInsets\", JBUI.insets(1, 1, 1, 1));\n    defaults.put(\"Spinner.editorBorderPainted\", false);\n    defaults.put(\"ScrollBarUI\", JBScrollBar.class.getName());\n    defaults.put(JBScrollBar.class.getName(), JBScrollBar.class);\n\n    // todo remove deprecated keys\n    defaults.put(\"Focus.activeErrorBorderColor\", new ColorUIResource(0xE53935));\n    defaults.put(\"Component.focusErrorColor\", new ColorUIResource(0xE53935));\n    defaults.put(\"Component.errorFocusColor\", new ColorUIResource(0xE53935));\n    defaults.put(\"Focus.inactiveErrorBorderColor\", new ColorUIResource(0x743A3A));\n    defaults.put(\"Component.inactiveFocusErrorColor\", new ColorUIResource(0x743A3A));\n    defaults.put(\"Component.inactiveErrorFocusColor\", new ColorUIResource(0x743A3A));\n    defaults.put(\"Focus.activeWarningBorderColor\", new ColorUIResource(0xFFB62C));\n    defaults.put(\"Component.focusWarningColor\", new ColorUIResource(0xFFB62C));\n    defaults.put(\"Component.warningFocusColor\", new ColorUIResource(0xFFB62C));\n    defaults.put(\"Focus.inactiveWarningBorderColor\", new ColorUIResource(0x7F6C00));\n    defaults.put(\"Component.inactiveFocusWarningColor\", new ColorUIResource(0x7F6C00));\n    defaults.put(\"Component.inactiveWarningFocusColor\", new ColorUIResource(0x7F6C00));\n\n    defaults.put(\"TabbedPane.tabAreaInsets\", JBUI.insets(0));\n    defaults.put(\"TabbedPane.selectedLabelShift\", 0);\n    defaults.put(\"TabbedPane.labelShift\", 0);\n    defaults.put(\"TabbedPane.tabsOverlapBorder\", true);\n    defaults.put(\"TabbedPane.tabHeight\", 32);\n    defaults.put(\"TabbedPane.tabSelectionHeight\", 2);\n    defaults.put(\"TabbedPane.tabFillStyle\", \"underline\");\n    defaults.put(\"TabbedPane.fontSizeOffset\", 0);\n\n    defaults.put(\"TableHeader.height\", 25);\n    defaults.put(\"NewClass.separatorWidth\", 10);\n\n    defaults.put(\"List.selectedItemAlpha\", 100);\n    defaults.put(\"EditorTabs.underlineHeight\", 0);\n  }\n\n  private static void replaceDefaultButtons(final UIDefaults defaults) {\n    defaults.put(\"ButtonUI\", MTDarculaButtonUI.class.getName());\n    defaults.put(MTDarculaButtonUI.class.getName(), MTDarculaButtonUI.class);\n  }\n\n  /**\n   * Replace buttons\n   *\n   * @param defaults of type UIDefaults\n   */\n  private static void replaceButtons(final UIDefaults defaults) {\n    defaults.put(\"ButtonUI\", MTButtonUI.class.getName());\n    defaults.put(MTButtonUI.class.getName(), MTButtonUI.class);\n\n    defaults.put(\"Button.border\", new MTButtonBorder());\n\n    defaults.put(\"OptionButtonUI\", MTOptionButtonUI.class.getName());\n    defaults.put(MTOptionButtonUI.class.getName(), MTOptionButtonUI.class);\n\n    defaults.put(\"OnOffButtonUI\", MTOnOffButtonUI.class.getName());\n    defaults.put(MTOnOffButtonUI.class.getName(), MTOnOffButtonUI.class);\n\n    defaults.put(\"ActionButton.backgroundIcon\", new Icon() {\n      @Override\n      public void paintIcon(final Component c, final Graphics g, final int x, final int y) {\n        final Graphics2D g2 = (Graphics2D) g.create();\n        try {\n          g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\n          g2.setRenderingHint(RenderingHints.KEY_STROKE_CONTROL, RenderingHints.VALUE_STROKE_NORMALIZE);\n\n          g2.translate(x, y);\n          g2.setColor(JBUI.CurrentTheme.ActionButton.pressedBackground());\n\n          if (getIconWidth() > 28) {\n            g2.fill3DRect(0, 0, getIconWidth(), getIconHeight(), true);\n          } else {\n            g2.fillOval(0, 0, getIconWidth(), getIconHeight());\n          }\n        } finally {\n          g2.dispose();\n        }\n      }\n\n      @Override\n      public int getIconWidth() {\n        return JBUI.scale(18);\n      }\n\n      @Override\n      public int getIconHeight() {\n        return JBUI.scale(18);\n      }\n    });\n  }\n\n  /**\n   * Replace text fields\n   *\n   * @param defaults of type UIDefaults\n   */\n  private static void replaceTextFields(final UIDefaults defaults) {\n    defaults.put(\"TextFieldUI\", MTTextFieldUI.class.getName());\n    defaults.put(MTTextFieldUI.class.getName(), MTTextFieldUI.class);\n\n    defaults.put(\"PasswordFieldUI\", MTPasswordFieldUI.class.getName());\n    defaults.put(MTPasswordFieldUI.class.getName(), MTPasswordFieldUI.class);\n\n    defaults.put(\"TextField.border\", new MTTextBorder());\n    defaults.put(\"PasswordField.border\", new MTTextBorder());\n    defaults.put(\"EditorTextField.border\", new MTEditorTextFieldBorder());\n  }\n\n  /**\n   * Replace dropdowns\n   *\n   * @param defaults of type UIDefaults\n   */\n  private static void replaceDropdowns(final UIDefaults defaults) {\n    defaults.put(\"ComboBoxUI\", MTComboBoxUI.class.getName());\n    defaults.put(MTComboBoxUI.class.getName(), MTComboBoxUI.class);\n  }\n\n  /**\n   * Replace progress bars\n   *\n   * @param defaults of type UIDefaults\n   */\n  private static void replaceProgressBar(final UIDefaults defaults) {\n    defaults.put(\"ProgressBarUI\", MTProgressBarUI.class.getName());\n    defaults.put(MTProgressBarUI.class.getName(), MTProgressBarUI.class);\n\n    defaults.put(\"ProgressBar.border\", new MTProgressBarBorder());\n  }\n\n  /**\n   * Replace trees with custom trees with arrow styles, padding, etc\n   *\n   * @param defaults of type UIDefaults\n   */\n  public static void replaceTree(final UIDefaults defaults) {\n    ApplicationManager.getApplication().putUserData(Control.Painter.KEY, new MTRowPainter());\n  }\n\n  /**\n   * Install the selected item indicator in trees\n   *\n   * @param defaults of type UIDefaults\n   */\n  private static void replaceSelectedIndicator(@NonNls final UIDefaults defaults) {\n    final MTSelectedTreePainter painter = new MTSelectedTreePainter();\n    defaults.put(MTUI.List.LIST_SELECTION_BACKGROUND_PAINTER, painter);\n    defaults.put(MTUI.List.LIST_FOCUSED_SELECTION_BACKGROUND_PAINTER, painter);\n  }\n\n  /**\n   * Replace Table headers with padded headers\n   *\n   * @param defaults of type UIDefaults\n   */\n  private static void replaceTableHeaders(@NonNls final UIDefaults defaults) {\n    defaults.put(\"TableHeaderUI\", MTTableHeaderUI.class.getName());\n    defaults.put(MTTableHeaderUI.class.getName(), MTTableHeaderUI.class);\n\n    defaults.put(\"TableHeader.border\", new MTTableHeaderBorder());\n    defaults.put(\"Table.focusSelectedCellHighlightBorder\", new MTTableSelectedCellHighlightBorder());\n  }\n\n  /**\n   * Replace tables with padded tables\n   *\n   * @param defaults of type UIDefaults\n   */\n  private static void replaceTables(@NonNls final UIDefaults defaults) {\n    defaults.put(\"TableHeader.cellBorder\", new MTTableHeaderBorder());\n    defaults.put(\"Table.cellNoFocusBorder\", new MTTableCellNoFocusBorder());\n    defaults.put(\"Table.focusCellHighlightBorder\", new MTTableSelectedCellHighlightBorder());\n  }\n\n  /**\n   * Replace the status bar with padded status bar\n   *\n   * @param defaults of type UIDefaults\n   */\n  private static void replaceStatusBar(@NonNls final UIDefaults defaults) {\n    defaults.put(\"IdeStatusBarUI\", MTStatusBarUI.class.getName());\n    defaults.put(MTStatusBarUI.class.getName(), MTStatusBarUI.class);\n    defaults.put(MTUI.StatusBar.IDE_STATUS_BAR_BORDER, new MTStatusBarBorder());\n\n    defaults.put(\"SeparatorUI\", MTSeparatorUI.class.getName());\n    defaults.put(MTSeparatorUI.class.getName(), MTSeparatorUI.class);\n  }\n\n  /**\n   * Replace the spinners\n   *\n   * @param defaults of type UIDefaults\n   */\n  private static void replaceSpinners(final UIDefaults defaults) {\n    defaults.put(\"SpinnerUI\", MTSpinnerUI.class.getName());\n    defaults.put(MTSpinnerUI.class.getName(), MTSpinnerUI.class);\n\n    defaults.put(\"Spinner.border\", new MTSpinnerBorder());\n  }\n\n  /**\n   * Replace the checkboxes.\n   *\n   * @param defaults of type UIDefaults\n   */\n  private static void replaceCheckboxes(final UIDefaults defaults) {\n    defaults.put(\"CheckBoxUI\", MTCheckBoxUI.class.getName());\n    defaults.put(MTCheckBoxUI.class.getName(), MTCheckBoxUI.class);\n\n    defaults.put(\"CheckBoxMenuItemUI\", MTCheckBoxMenuItemUI.class.getName());\n    defaults.put(MTCheckBoxMenuItemUI.class.getName(), MTCheckBoxMenuItemUI.class);\n\n    defaults.put(\"CheckBox.border\", new MTCheckBoxBorder());\n  }\n\n  /**\n   * Replace the radio buttons\n   *\n   * @param defaults of type UIDefaults\n   */\n  private static void replaceRadioButtons(final UIDefaults defaults) {\n    defaults.put(\"RadioButtonUI\", MTRadioButtonUI.class.getName());\n    defaults.put(MTRadioButtonUI.class.getName(), MTRadioButtonUI.class);\n\n    defaults.put(\"RadioButtonMenuItemUI\", MTRadioButtonMenuItemUI.class.getName());\n    defaults.put(MTRadioButtonMenuItemUI.class.getName(), MTRadioButtonMenuItemUI.class);\n  }\n\n  /**\n   * Replace the sliders\n   *\n   * @param defaults of type UIDefaults\n   */\n  private static void replaceSliders(final UIDefaults defaults) {\n    defaults.put(\"SliderUI\", MTSliderUI.class.getName());\n    defaults.put(MTSliderUI.class.getName(), MTSliderUI.class);\n  }\n\n  /**\n   * Replace the root pane to enable the themed title bar\n   *\n   * @param defaults of type UIDefaults\n   */\n  private static void replaceRootPane(final UIDefaults defaults) {\n    defaults.put(\"RootPaneUI\", MTRootPaneUI.class.getName());\n    defaults.put(MTRootPaneUI.class.getName(), MTRootPaneUI.class);\n  }\n\n  /**\n   * Replace the text areas\n   *\n   * @param defaults of type UIDefaults\n   */\n  private static void replaceTextAreas(final UIDefaults defaults) {\n    defaults.put(\"TextAreaUI\", MTTextAreaUI.class.getName());\n    defaults.put(MTTextAreaUI.class.getName(), MTTextAreaUI.class);\n  }\n\n  /**\n   * Replace Tabbed Panes with Custom tabbed panes\n   *\n   * @param defaults of type UIDefaults\n   */\n  private static void replaceTabbedPanes(final UIDefaults defaults) {\n    defaults.put(\"TabbedPane.tabInsets\", JBUI.insets(5, 10, 5, 10));\n    defaults.put(\"TabbedPane.selectedTabPadInsets\", JBUI.insets(0));\n    defaults.put(\"TabbedPane.contentBorderInsets\", JBUI.insets(3, 1, 1, 1));\n\n    defaults.put(\"TabbedPaneUI\", MTTabbedPaneUI.class.getName());\n    defaults.put(MTTabbedPaneUI.class.getName(), MTTabbedPaneUI.class);\n  }\n\n  private static void replaceLabels(@NonNls final UIDefaults defaults) {\n    defaults.put(\"LabelUI\", MTLabelUI.class.getName());\n    defaults.put(MTLabelUI.class.getName(), MTLabelUI.class);\n  }\n\n  /**\n   * Replace the menus with padded menus\n   *\n   * @param defaults defaults to fill\n   */\n  private static void replaceMenus(@NonNls final UIDefaults defaults) {\n    defaults.put(\"PopupMenuUI\", MTPopupMenuUI.class.getName());\n    defaults.put(MTPopupMenuUI.class.getName(), MTPopupMenuUI.class);\n\n    defaults.put(\"PopupMenu.border\", new MTPopupMenuBorder());\n    //    defaults.put(\"PopupMenuSeparatorUI\", MTMenuSeparatorUI.class.getName());\n    //    defaults.put(MTMenuSeparatorUI.class.getName(), MTMenuSeparatorUI.class);\n\n    //    defaults.put(\"MenuItemUI\", MTPopupMenuItemUI.class.getName());\n    //    defaults.put(MTPopupMenuItemUI.class.getName(), MTPopupMenuItemUI.class);\n    defaults.put(\"MenuItem.border\", new MTMenuItemBorder());\n    defaults.put(\"Menu.border\", new MTMenuItemBorder());\n  }\n\n  //  private static void replaceIcons(@NonNls final UIDefaults defaults) {\n  //    final Icon expandIcon = MTConfig.getInstance().getArrowsStyle().getExpandIcon();\n  //    final Icon collapseIcon = MTConfig.getInstance().getArrowsStyle().getCollapseIcon();\n  //\n  //    defaults.put(\"Tree.collapsedIcon\", expandIcon);\n  //    defaults.put(\"Tree.expandedIcon\", collapseIcon);\n  //    defaults.put(\"Menu.arrowIcon\", expandIcon);\n  //    defaults.put(\"RadioButtonMenuItem.arrowIcon\", expandIcon);\n  //    defaults.put(\"CheckBoxMenuItem.arrowIcon\", expandIcon);\n  //\n  //    defaults.put(\"FileView.fileIcon\", AllIcons.FileTypes.Unknown);\n  //    defaults.put(\"Table.ascendingSortIcon\", AllIcons.General.ArrowUp);\n  //    defaults.put(\"Table.descendingSortIcon\", AllIcons.General.ArrowDown);\n  //\n  //    defaults.put(\"TextField.darcula.searchWithHistory.icon\", IconLoader.getIcon(\"/icons/mt/searchWithHistory.png\"));\n  //    defaults.put(\"TextField.darcula.search.icon\", IconLoader.getIcon(\"/icons/mt/search.png\"));\n  //    defaults.put(\"TextField.darcula.clear.icon\", IconLoader.getIcon(\"/icons/mt/clear.png\"));\n  //  }\n\n  /**\n   * Add registry modifications\n   */\n  private static void modifyRegistry() {\n    Registry.get(\"ide.balloon.shadow.size\").setValue(0);\n  }\n\n  /**\n   * Install defaults - background, foreground, selection background and foreground, inactive background\n   *\n   * @param defaults of type UIDefaults the defaults to fill\n   */\n  @SuppressWarnings({\"MagicCharacter\",\n    \"DuplicateStringLiteralInspection\",\n    \"FeatureEnvy\",\n    \"Duplicates\"})\n  static void loadDefaults(final UIDefaults defaults) {\n    @NonNls final Map<String, Object> globalProps = new HashMap<>(100);\n    final MTThemeable selectedTheme = MTConfig.getInstance().getSelectedTheme().getTheme();\n\n    final Color backgroundColorString = selectedTheme.getBackgroundColor();\n    final ColorUIResource backgroundColor = new ColorUIResource(backgroundColorString);\n    globalProps.put(\"background\", backgroundColor);\n    globalProps.put(\"textBackground\", backgroundColor);\n    globalProps.put(\"inactiveBackground\", backgroundColor);\n\n    final Color foregroundColorString = selectedTheme.getForegroundColor();\n    final ColorUIResource foregroundColor = new ColorUIResource(foregroundColorString);\n    globalProps.put(\"foreground\", foregroundColor);\n    globalProps.put(\"textForeground\", foregroundColor);\n    globalProps.put(\"inactiveForeground\", foregroundColor);\n    globalProps.put(\"selectionForegroundInactive\", foregroundColor);\n    globalProps.put(\"selectionInactiveForeground\", foregroundColor);\n\n    final Color selectionBackgroundColorString = selectedTheme.getSelectionBackgroundColor();\n    final Color selectionBgColor = new ColorUIResource(selectionBackgroundColorString);\n    globalProps.put(\"selectionBackgroundInactive\", selectionBgColor);\n    globalProps.put(\"selectionInactiveBackground\", selectionBgColor);\n\n    final Color selectionForegroundColorString = selectedTheme.getSelectionForegroundColor();\n    final Color selectionFgColor = new ColorUIResource(selectionForegroundColorString);\n    globalProps.put(\"selectionForeground\", selectionFgColor);\n\n    for (final Object key : defaults.keySet()) {\n      if (key instanceof String && ((String) key).contains(\".\")) {\n        final String s = (String) key;\n        final String property = s.substring(s.lastIndexOf('.') + 1);\n        if (globalProps.containsKey(property)) {\n          defaults.put(key, globalProps.get(property));\n        }\n      }\n    }\n  }\n\n  /**\n   * Method getPrefix returns the prefix of the theme in properties\n   *\n   * @return the prefix (type String) of the theme in properties\n   */\n  final String getPrefix() {\n    return Objects.requireNonNull(theme).getId();\n  }\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/mallowigi/idea/lafs/MTLafInstaller.java b/src/main/java/com/mallowigi/idea/lafs/MTLafInstaller.java
--- a/src/main/java/com/mallowigi/idea/lafs/MTLafInstaller.java	(revision ab6db325159d89e283a5dd4e1433736c27126c06)
+++ b/src/main/java/com/mallowigi/idea/lafs/MTLafInstaller.java	(date 1620395204673)
@@ -117,7 +117,7 @@
     defaults.put("Caret.width", 2);
     defaults.put("Border.width", 2); // deprecated
     defaults.put("Component.focusWidth", 2);
-    defaults.put("CompletionPopup.nonFocusedState", false);
+    defaults.put("CompletionPopup.nonFocusedState", true);
     defaults.put("CellEditor.border.width", 2);
     defaults.put("Window.border", "1,1,1,1,000000");
     defaults.put("Tree.border", "1,1,1,1");
