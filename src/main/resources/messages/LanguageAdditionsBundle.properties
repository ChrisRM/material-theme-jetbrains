#
# The MIT License (MIT)
#
# Copyright (c) 2015-2021 Elior "Mallowigi" Boukhobza
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
#
#

globals.prototype=Globals//prototype
globals.var.console=Globals//console, document, global, window
JavaColorPage.demoText=\
<import>package</import> com.info.package;\n\
\n\
<import>import</import> java.awt.*;\n\
\n\
public class <class>SomeClass</class> extends <class>BaseClass</class> {\n\
\ \ <modifier>private</modifier> <sf>static final</sf> <field>field</field> = null;\n\
\ \ <modifier>protected</modifier> <sf>final</sf> <field>otherField</field>;\n\
\ \ <modifier>public</modifier> <constructorDeclaration>SomeClass</constructorDeclaration>(<interface>AnInterface</interface> <param>param1</param>, int[] <reassignedParameter>reassignedParam</reassignedParameter>, int <param>param2</param>, int <param>param3</param>) {\n\
\ \ \ \ <this>super</this>(<param>param1</param>);\n\
\ \ \ \ <this>this</this>.<warning>field</warning> = <param>param1</param>;\n\
\ \ \ \ <this>this</this>.<warning>unused</warning> = <null>null</null>;\n\
\ \ \ \ <keyword>return</keyword> <null>true</null> || <null>false</null>;\n\
\ \ }\n\
};
JavaColorPage.java.additions=Java Additions
JSColorPage.demoText=\
<import>import</import> <local_variable>_</local_variable> <import>from</import> <string>'lodash'</string>;\n\
\n\
<class>class</class> <class_name>SomeClass</class_name> <class>extends</class> <class_name>AbstractClass</class_name> <class>implements</class> <interface_name>Interface</interface_name> {\n\
\ \ <function>static</function> <function_name>foo</function_name>() {}\n\
\ \ <function>get</function> <function_name>hello</function_name>() {}\n\
\ \ <function>set</function> <function_name>hello</function_name>(v) {}\n\
\n\
}\n\
\n\
<function>function</function> <function_name>foo</function_name>() {\n\
\ \ <val>var</val> <local_variable>x</local_variable> = <number>10</number>;\n\
\ \ <this>this</this>.<inst_field>x</inst_field> = <null>null</null>;\n\
\ \ <keyword>if</keyword> (<local_variable>x</local_variable> === <null>undefined</null>) {\n\
\ \ \ \ <console>console</console>.<function>log</function>(<string>'foo'</string>);\n\
\ \ \ \ <console>window</console>.<function>alert</function>(<string>'foo'</string>);\n\
\ \ \ \ <debugger>debugger</debugger>;\n\
\ \ \ \ <keyword>return</keyword> <primitive>false</primitive>;\n\
\ \ }\n\
\n\
\ \ <keyword>return</keyword> <primitive>true</primitive>;\n\
}\n\
\n\
<async>async</async> <function>function</function> <function_name>promise</function_name>() {\n\
\ \ <try>try</try> {\n\
\ \ \ \ <val>const</val> <local_variable>res</local_variable> = <async>await</async> <function>myCall</function>();\n\
\ \ \ \ <yield>yield</yield> <number>10</number>;\n\
\ \ } <try>catch</try> (<local_variable>e</local_variable>) {\n\
\ \ \ \ <new>throw</new> <new>new</new> <function_name>Error</function_name>("invalid");\n\
\ \ } <try>finally</try> {\n\
\ \ \ \ <keyword>for</keyword> (<val>let</val> <local_variable>elem</local_variable> <inline>of</inline> <local_variable>array</local_variable>) {\n\
\ \ \ \ \ \ <keyword>if</keyword> (<local_variable>elem</local_variable> <inline>instanceof</inline> <class_name>SomeClass</class_name> || <local_variable>elem</local_variable> <inline>typeof</inline> <class_name>SomeClass</class_name>) <keyword>return <primitive>false</primitive>;\n\
\ \ \ \ }\n\
\ \ }\n\
\n\
\ \ <keyword>return</keyword> <primitive>true</primitive>;\n\
}\n\
\n\
<class_name>SomeClass</class_name>.<prototype>prototype</prototype>.<function_name>foo</function_name> = <local_variable>foo</local_variable>;\n\
\n\
<import>export</import> <import>default</import> foo;\n\
<import>module</import>.exports = foo;
JSColorPage.java.additions=JavaScript Additions
keywords.async=Keywords//async, await
keywords.class.extends=Keywords//class, extends, implements
keywords.companion=Keywords//object, companion
keywords.data=Keywords//data
keywords.debugger=Keywords//debugger
keywords.declare=Keywords//declare
keywords.function=Keywords//function, static, get, set
keywords.import.package=Keywords//import, package
keywords.inline=Keywords//in, of, instanceof, typeof
keywords.module.import.export.from=Keywords//module, default, import, export, from
keywords.new=Keywords//new, throw
keywords.null.undefined=Primitives//null, undefined, NaN
keywords.null.unit=Primitives//null, Unit
keywords.operator.infix=Keywords//operator, infix
keywords.primitives=Primitives//null, true, false
keywords.private.public.internal=Keywords//private, public, internal
keywords.private.public.protected=Keywords//private, public, protected
keywords.sealed.override.open=Keywords//sealed, override, open
keywords.static.final=Keywords//static, final
keywords.this.super=Keywords//this, super
keywords.true.false=Primitives//true, false
keywords.try.catch=Keywords//try, catch, finally
keywords.type.alias=Keywords//type, alias
keywords.var.let.const=Keywords//var, let, const
keywords.yield=Keywords//yield
KotlinColorPage.demoText=\
<import>import</import> java.util.*\n\
\n\
<import>package</import> myPackage.hello;\n\
\n\
<sealed>open</sealed> <keyword>class</keyword> <class>MyClass</class> {\n\
\n\
\ \ \ \ <modifier>private</modifier> <val>val</val> <instanceFinalField>fooBar</instanceFinalField> = "";\n\
\n\
\ \ \ \ <modifier>protected</modifier> <sealed>open</sealed> <keyword>fun</keyword> <methodDeclaration>foo</methodDeclaration>(): <null>Unit</null>? {\n\
\ \ \ \ \ \ \ \ <val>val</val> values = <methodCall>listOf</methodCall>(<primitive>true</primitive>, <null>null</null>, <primitive>false</primitive>);\n\
\ \ \ \ \ \ \ \ <methodCall>println</methodCall>(<localVar>values</localVar>);\n\
\ \ \ \ \ \ \ \ <keyword>return</keyword> <null>null</null>;\n\
\ \ \ \ }\n\
\n\
\ \ \ \ <modifier>internal</modifier> <keyword>fun</keyword> <methodDeclaration>bar</methodDeclaration>() {\n\
\ \ \ \ \ \ \ \ <keyword>return</keyword> <null>Unit</null>;\n\
\ \ \ \ }\n\
}\n\
\n\
<sealed>sealed</sealed> <keyword>class</keyword> <class>MySealedClass</class> : <constructorCall>MyClass</constructorCall>() {\n\
\ \ \ \ <sealed>override</sealed> <keyword>fun</keyword> <methodDeclaration>foo</methodDeclaration>(): <null>Unit</null>? {\n\
\ \ \ \ \ \ \ \ <methodCall>println</methodCall>(<string>"overriden"</string>);\n\
\ \ \ \ \ \ \ \ <keyword>return</keyword> <null>null</null>;\n\
\ \ \ \ }\n\
\n\
\ \ \ \ <companion>companion</companion> <companion>object</companion> {\n\
\ \ \ \ \ \ \ \ <keyword>fun</keyword> <methodDeclaration>create</methodDeclaration>(): <class>MyClass</class> {\n\
\ \ \ \ \ \ \ \ \ \ \ \ <keyword>return</keyword> <constructorCall>MyClass</constructorCall>()\n\
\ \ \ \ \ \ \ \ }\n\
\ \ \ \ }\n\
}\n\
\n\
<data>data</data> <keyword>class</keyword> <class>MyDataClass</class>(<val>val</val> <param>num</param>: <class>Int</class>) {\n\
\ \ \ \ <modifier>public</modifier> <infix>operator</infix> <infix>infix</infix> <keyword>fun</keyword> <methodDeclaration>plus</methodDeclaration>(<param>to</param>: <class>Int</class>) {\n\
\ \ \ \ \ \ \ \ <keyword>return</keyword> <this>this</this> + <param>to</param>;\n\
\ \ \ \ }\n\
};
KotlinColorPage.kotlin.additions=Kotlin Additions
php.keywords.echo=Functions//echo
php.keywords.exit.die=Functions//exit, die
php.keywords.function=Keywords//function
php.keywords.null=Primitives//null
php.keywords.private.public.protected=Keywords//private, public, protected
php.keywords.self=Keywords//self
php.keywords.static.final=Keywords//static, final
php.keywords.true.false=Keywords//true, false
php.keywords.use.namespace=Keywords//use, namespace
PHPColorPage.demoText=\
<use>namespace</use> <class>Foo\\Bar\\Baz</class>;\n\
\n\
<use>use</use> <class>SomeClass</class>;\n\
\n\
<static>final</static> <keyword>class</keyword> <class>MyClass</class> <keyword>extends</keyword> <class>MyOtherClass</class> {\n\
\ \ <modifier>public</modifier> <keyword>const</keyword> <var>SINGLE</var> = <num>1</num>;\n\
\ \ <modifier>private</modifier> <var>$variable</var> = <primitive>true</primitive>;\n\
\ \ <modifier>protected</modifier> <var>$arguments</var> = <fn>array</fn>(<primitive>null</primitive>, <primitive>false</primitive>);\n\
}\n\
\n\
<modifier>public</modifier> <function>function</function> <fn>getVar</fn>() {\n\
\ \ <echo>echo</echo> <string>\"Returning myself\"</string>;\n\
\ \ <keyword>return</keyword> <self>self</self>::<var>variable</var>;\n\
}\n\
\n\
<exit>die</exit>(<num>1</num>);
PHPColorPage.php.additions=PHP Additions
TSColorPage.demoText=\
<import>import</import> <local_variable>_</local_variable> <import>from</import> <string>'lodash'</string>;\n\
<import>export</import> <declare>declare</declare> <keyword>interface</keyword> <class>MyInterface</class> <import>from</import> <string>'./myClass'</string>;\n\
<import>export default</import> <class>MyClass</class>;\n\
\n\
<type>type</type> <class>MyFoo</class> = <class>MyInterface</class>;\n\
\n\
<keyword>class</keyword> <class>MyType</class> <keyword>extends</keyword> <class>AbstractClass</class> {\n\
\n\
\ \ <private>private</private> <local_variable>field</local_variable>: <class>String</class>;\n\
\ \ <private>protected</private> <local_variable>protect</local_variable>: <class>Number</class>;\n\
\ \ <private>public</private> <local_variable>num</local_variable> = <number>10</number>;\n\
\n\
\ \ <function>static</function> <function_name>foo</function_name>() {}\n\
\ \ <function>get</function> <function_name>hello</function_name>() {}\n\
\ \ <function>set</function> <function_name>hello</function_name>(v) {}\n\
\n\
\ \ <function_name>method</function_name>() {\n\
\ \ \ \ <val>var</val> <local_variable>x</local_variable> = <number>10</number>;\n\
\ \ \ \ <this>this</this>.<inst_field>x</inst_field> = <null>null</null>;\n\
\ \ \ \ <keyword>if</keyword> (<local_variable>x</local_variable> === <null>undefined</null>) {\n\
\ \ \ \ \ \ <console>console</console>.<function>log</function>(<string>'foo'</string>);\n\
\ \ \ \ \ \ <debugger>debugger</debugger>;\n\
\ \ \ \ \ \ <keyword>return</keyword> <primitive>false</primitive>;\n\
\ \ \ \ }\n\
\ \ \ \ <keyword>return</keyword> <primitive>true</primitive>;\n\
\ \ }\n\
\n\
}
TSColorPage.ts.additions=TypeScript Additions