/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015-2021 Elior "Mallowigi" Boukhobza
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 *
 */
buildscript {
    repositories {
        jcenter()
        maven { url 'https://dl.bintray.com/content/aalmiray/kordamp' }
    }
    dependencies {
        classpath 'org.kordamp:markdown-gradle-plugin:1.0.0'
    }
}


plugins {
    id 'org.jetbrains.intellij' version '0.7.2'
    id "org.jetbrains.kotlin.jvm" version "1.5.0-M2"
}

repositories {
    mavenCentral()
    maven { url 'https://dl.bintray.com/jetbrains/intellij-plugin-service' }
}


dependencies {
    implementation('com.thoughtworks.xstream:xstream:1.4.11.1')
    implementation 'org.javassist:javassist:3.27.0-GA'
    implementation 'com.mixpanel:mixpanel-java:1.5.0'
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.5.0-M2'
}
apply plugin: 'org.kordamp.markdown.convert'

apply plugin: 'java'
apply plugin: 'checkstyle'
sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

apply plugin: "kotlin"

//noinspection GroovyAssignabilityCheck,GrUnresolvedAccess
tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    //noinspection GrUnresolvedAccess
    kotlinOptions {
        apiVersion = "1.0"
        jvmTarget = "1.8"
    }
}

sourceSets {
    main {
        java.srcDirs 'src/main/java'
        resources.srcDir 'src/main/resources'
    }
}

checkstyle {
    configFile = new File(rootDir, "gradle/checkstyle.xml")
    toolVersion = "8.1"
}

markdownToHtml {
    sourceDir new File("$projectDir/docs")
    outputDir new File("$projectDir/docs")
}

version = System.getenv("pluginVersion") ?: pluginVersion
def pluginsDependencies = [
        'JavaScriptLanguage'
]

intellij {
    pluginName 'Material Theme'
    type 'IU'
    version '211.6693.111'
    downloadSources true
    instrumentCode true
//    sameSinceUntilBuild false
    updateSinceUntilBuild true
    alternativeIdePath idePath
//    systemProperty "idea.platform.prefix","DataGrip"

//    plugins 'org.jetbrains.plugins.go:193.5233.102.83'

    patchPluginXml {
        version "$version"
        sinceBuild System.getenv("pluginSinceBuild") ?: sinceBuildP
        changeNotes file("$projectDir/docs/CHANGELOG.html").text
//        untilBuild System.getenv("pluginUntilBuild") ?: untilBuildP
    }

    publishPlugin {
        token file("$projectDir/publishToken").text ?: System.getenv("publishToken") ?: publishToken
        username System.getenv("publishUsername") ?: publishUsername
        password System.getenv("publishPassword") ?: publishPassword
    }

    buildSearchableOptions {
        enabled false
    }

//    runIde {
//        jbrVersion '11_0_10b1145.96'
//    }
    setPlugins(*pluginsDependencies)
}
compileKotlin {
    kotlinOptions {
        apiVersion = "1.3"
        jvmTarget = "1.8"
    }
}
